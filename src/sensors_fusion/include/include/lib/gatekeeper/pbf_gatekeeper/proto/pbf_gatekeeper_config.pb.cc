// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbf_gatekeeper_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbf_gatekeeper_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace fusion {
class PbfGatekeeperConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PbfGatekeeperConfig> {
} _PbfGatekeeperConfig_default_instance_;

namespace protobuf_pbf_5fgatekeeper_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, publish_if_has_lidar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, publish_if_has_radar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, publish_if_has_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, use_camera_3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, min_radar_confident_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, max_radar_confident_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, min_camera_publish_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, invisible_period_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, toic_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, use_track_time_pub_strategy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, pub_track_time_thresh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, existence_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbfGatekeeperConfig, radar_existence_threshold_),
  9,
  10,
  11,
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(PbfGatekeeperConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PbfGatekeeperConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pbf_gatekeeper_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _PbfGatekeeperConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PbfGatekeeperConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033pbf_gatekeeper_config.proto\022\030apollo.pe"
      "rception.fusion\"\315\003\n\023PbfGatekeeperConfig\022"
      "\"\n\024publish_if_has_lidar\030\001 \001(\010:\004true\022\"\n\024p"
      "ublish_if_has_radar\030\002 \001(\010:\004true\022#\n\025publi"
      "sh_if_has_camera\030\003 \001(\010:\004true\022\033\n\ruse_came"
      "ra_3d\030\004 \001(\010:\004true\022$\n\034min_radar_confident"
      "_distance\030\005 \001(\001\022!\n\031max_radar_confident_a"
      "ngle\030\006 \001(\001\022#\n\033min_camera_publish_distanc"
      "e\030\007 \001(\001\022\"\n\032invisible_period_threshold\030\010 "
      "\001(\001\022\026\n\016toic_threshold\030\t \001(\001\022#\n\033use_track"
      "_time_pub_strategy\030\n \001(\010\022\035\n\025pub_track_ti"
      "me_thresh\030\013 \001(\005\022\033\n\023existence_threshold\030\014"
      " \001(\001\022!\n\031radar_existence_threshold\030\r \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pbf_gatekeeper_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_pbf_5fgatekeeper_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbfGatekeeperConfig::kPublishIfHasLidarFieldNumber;
const int PbfGatekeeperConfig::kPublishIfHasRadarFieldNumber;
const int PbfGatekeeperConfig::kPublishIfHasCameraFieldNumber;
const int PbfGatekeeperConfig::kUseCamera3DFieldNumber;
const int PbfGatekeeperConfig::kMinRadarConfidentDistanceFieldNumber;
const int PbfGatekeeperConfig::kMaxRadarConfidentAngleFieldNumber;
const int PbfGatekeeperConfig::kMinCameraPublishDistanceFieldNumber;
const int PbfGatekeeperConfig::kInvisiblePeriodThresholdFieldNumber;
const int PbfGatekeeperConfig::kToicThresholdFieldNumber;
const int PbfGatekeeperConfig::kUseTrackTimePubStrategyFieldNumber;
const int PbfGatekeeperConfig::kPubTrackTimeThreshFieldNumber;
const int PbfGatekeeperConfig::kExistenceThresholdFieldNumber;
const int PbfGatekeeperConfig::kRadarExistenceThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbfGatekeeperConfig::PbfGatekeeperConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pbf_5fgatekeeper_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.fusion.PbfGatekeeperConfig)
}
PbfGatekeeperConfig::PbfGatekeeperConfig(const PbfGatekeeperConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_radar_confident_distance_, &from.min_radar_confident_distance_,
    reinterpret_cast<char*>(&use_camera_3d_) -
    reinterpret_cast<char*>(&min_radar_confident_distance_) + sizeof(use_camera_3d_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.PbfGatekeeperConfig)
}

void PbfGatekeeperConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_radar_confident_distance_, 0, reinterpret_cast<char*>(&radar_existence_threshold_) -
    reinterpret_cast<char*>(&min_radar_confident_distance_) + sizeof(radar_existence_threshold_));
  publish_if_has_lidar_ = true;
  publish_if_has_radar_ = true;
  publish_if_has_camera_ = true;
  use_camera_3d_ = true;
}

PbfGatekeeperConfig::~PbfGatekeeperConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.PbfGatekeeperConfig)
  SharedDtor();
}

void PbfGatekeeperConfig::SharedDtor() {
}

void PbfGatekeeperConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbfGatekeeperConfig::descriptor() {
  protobuf_pbf_5fgatekeeper_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pbf_5fgatekeeper_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbfGatekeeperConfig& PbfGatekeeperConfig::default_instance() {
  protobuf_pbf_5fgatekeeper_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

PbfGatekeeperConfig* PbfGatekeeperConfig::New(::google::protobuf::Arena* arena) const {
  PbfGatekeeperConfig* n = new PbfGatekeeperConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PbfGatekeeperConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.PbfGatekeeperConfig)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&min_radar_confident_distance_, 0, reinterpret_cast<char*>(&existence_threshold_) -
      reinterpret_cast<char*>(&min_radar_confident_distance_) + sizeof(existence_threshold_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    radar_existence_threshold_ = 0;
    publish_if_has_lidar_ = true;
    publish_if_has_radar_ = true;
    publish_if_has_camera_ = true;
    use_camera_3d_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PbfGatekeeperConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.fusion.PbfGatekeeperConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool publish_if_has_lidar = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publish_if_has_lidar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_if_has_lidar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish_if_has_radar = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_publish_if_has_radar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_if_has_radar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish_if_has_camera = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_publish_if_has_camera();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_if_has_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_camera_3d = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_use_camera_3d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_radar_confident_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_min_radar_confident_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_radar_confident_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_radar_confident_angle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_max_radar_confident_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_radar_confident_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_camera_publish_distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_min_camera_publish_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_camera_publish_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double invisible_period_threshold = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_invisible_period_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &invisible_period_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toic_threshold = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_toic_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toic_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_track_time_pub_strategy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_use_track_time_pub_strategy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_track_time_pub_strategy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pub_track_time_thresh = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_pub_track_time_thresh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pub_track_time_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double existence_threshold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_existence_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radar_existence_threshold = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_radar_existence_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radar_existence_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.fusion.PbfGatekeeperConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.fusion.PbfGatekeeperConfig)
  return false;
#undef DO_
}

void PbfGatekeeperConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.fusion.PbfGatekeeperConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool publish_if_has_lidar = 1 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->publish_if_has_lidar(), output);
  }

  // optional bool publish_if_has_radar = 2 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->publish_if_has_radar(), output);
  }

  // optional bool publish_if_has_camera = 3 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->publish_if_has_camera(), output);
  }

  // optional bool use_camera_3d = 4 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_camera_3d(), output);
  }

  // optional double min_radar_confident_distance = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_radar_confident_distance(), output);
  }

  // optional double max_radar_confident_angle = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_radar_confident_angle(), output);
  }

  // optional double min_camera_publish_distance = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->min_camera_publish_distance(), output);
  }

  // optional double invisible_period_threshold = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->invisible_period_threshold(), output);
  }

  // optional double toic_threshold = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->toic_threshold(), output);
  }

  // optional bool use_track_time_pub_strategy = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->use_track_time_pub_strategy(), output);
  }

  // optional int32 pub_track_time_thresh = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pub_track_time_thresh(), output);
  }

  // optional double existence_threshold = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->existence_threshold(), output);
  }

  // optional double radar_existence_threshold = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->radar_existence_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.fusion.PbfGatekeeperConfig)
}

::google::protobuf::uint8* PbfGatekeeperConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.PbfGatekeeperConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool publish_if_has_lidar = 1 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->publish_if_has_lidar(), target);
  }

  // optional bool publish_if_has_radar = 2 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->publish_if_has_radar(), target);
  }

  // optional bool publish_if_has_camera = 3 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->publish_if_has_camera(), target);
  }

  // optional bool use_camera_3d = 4 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_camera_3d(), target);
  }

  // optional double min_radar_confident_distance = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_radar_confident_distance(), target);
  }

  // optional double max_radar_confident_angle = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_radar_confident_angle(), target);
  }

  // optional double min_camera_publish_distance = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->min_camera_publish_distance(), target);
  }

  // optional double invisible_period_threshold = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->invisible_period_threshold(), target);
  }

  // optional double toic_threshold = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->toic_threshold(), target);
  }

  // optional bool use_track_time_pub_strategy = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->use_track_time_pub_strategy(), target);
  }

  // optional int32 pub_track_time_thresh = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pub_track_time_thresh(), target);
  }

  // optional double existence_threshold = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->existence_threshold(), target);
  }

  // optional double radar_existence_threshold = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->radar_existence_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.PbfGatekeeperConfig)
  return target;
}

size_t PbfGatekeeperConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.PbfGatekeeperConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double min_radar_confident_distance = 5;
    if (has_min_radar_confident_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_radar_confident_angle = 6;
    if (has_max_radar_confident_angle()) {
      total_size += 1 + 8;
    }

    // optional double min_camera_publish_distance = 7;
    if (has_min_camera_publish_distance()) {
      total_size += 1 + 8;
    }

    // optional double invisible_period_threshold = 8;
    if (has_invisible_period_threshold()) {
      total_size += 1 + 8;
    }

    // optional double toic_threshold = 9;
    if (has_toic_threshold()) {
      total_size += 1 + 8;
    }

    // optional bool use_track_time_pub_strategy = 10;
    if (has_use_track_time_pub_strategy()) {
      total_size += 1 + 1;
    }

    // optional int32 pub_track_time_thresh = 11;
    if (has_pub_track_time_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pub_track_time_thresh());
    }

    // optional double existence_threshold = 12;
    if (has_existence_threshold()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double radar_existence_threshold = 13;
    if (has_radar_existence_threshold()) {
      total_size += 1 + 8;
    }

    // optional bool publish_if_has_lidar = 1 [default = true];
    if (has_publish_if_has_lidar()) {
      total_size += 1 + 1;
    }

    // optional bool publish_if_has_radar = 2 [default = true];
    if (has_publish_if_has_radar()) {
      total_size += 1 + 1;
    }

    // optional bool publish_if_has_camera = 3 [default = true];
    if (has_publish_if_has_camera()) {
      total_size += 1 + 1;
    }

    // optional bool use_camera_3d = 4 [default = true];
    if (has_use_camera_3d()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbfGatekeeperConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.fusion.PbfGatekeeperConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PbfGatekeeperConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbfGatekeeperConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.fusion.PbfGatekeeperConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.fusion.PbfGatekeeperConfig)
    MergeFrom(*source);
  }
}

void PbfGatekeeperConfig::MergeFrom(const PbfGatekeeperConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.PbfGatekeeperConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      min_radar_confident_distance_ = from.min_radar_confident_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_radar_confident_angle_ = from.max_radar_confident_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_camera_publish_distance_ = from.min_camera_publish_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      invisible_period_threshold_ = from.invisible_period_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      toic_threshold_ = from.toic_threshold_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_track_time_pub_strategy_ = from.use_track_time_pub_strategy_;
    }
    if (cached_has_bits & 0x00000040u) {
      pub_track_time_thresh_ = from.pub_track_time_thresh_;
    }
    if (cached_has_bits & 0x00000080u) {
      existence_threshold_ = from.existence_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      radar_existence_threshold_ = from.radar_existence_threshold_;
    }
    if (cached_has_bits & 0x00000200u) {
      publish_if_has_lidar_ = from.publish_if_has_lidar_;
    }
    if (cached_has_bits & 0x00000400u) {
      publish_if_has_radar_ = from.publish_if_has_radar_;
    }
    if (cached_has_bits & 0x00000800u) {
      publish_if_has_camera_ = from.publish_if_has_camera_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_camera_3d_ = from.use_camera_3d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbfGatekeeperConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.fusion.PbfGatekeeperConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbfGatekeeperConfig::CopyFrom(const PbfGatekeeperConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.PbfGatekeeperConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbfGatekeeperConfig::IsInitialized() const {
  return true;
}

void PbfGatekeeperConfig::Swap(PbfGatekeeperConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbfGatekeeperConfig::InternalSwap(PbfGatekeeperConfig* other) {
  std::swap(min_radar_confident_distance_, other->min_radar_confident_distance_);
  std::swap(max_radar_confident_angle_, other->max_radar_confident_angle_);
  std::swap(min_camera_publish_distance_, other->min_camera_publish_distance_);
  std::swap(invisible_period_threshold_, other->invisible_period_threshold_);
  std::swap(toic_threshold_, other->toic_threshold_);
  std::swap(use_track_time_pub_strategy_, other->use_track_time_pub_strategy_);
  std::swap(pub_track_time_thresh_, other->pub_track_time_thresh_);
  std::swap(existence_threshold_, other->existence_threshold_);
  std::swap(radar_existence_threshold_, other->radar_existence_threshold_);
  std::swap(publish_if_has_lidar_, other->publish_if_has_lidar_);
  std::swap(publish_if_has_radar_, other->publish_if_has_radar_);
  std::swap(publish_if_has_camera_, other->publish_if_has_camera_);
  std::swap(use_camera_3d_, other->use_camera_3d_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PbfGatekeeperConfig::GetMetadata() const {
  protobuf_pbf_5fgatekeeper_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pbf_5fgatekeeper_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PbfGatekeeperConfig

// optional bool publish_if_has_lidar = 1 [default = true];
bool PbfGatekeeperConfig::has_publish_if_has_lidar() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PbfGatekeeperConfig::set_has_publish_if_has_lidar() {
  _has_bits_[0] |= 0x00000200u;
}
void PbfGatekeeperConfig::clear_has_publish_if_has_lidar() {
  _has_bits_[0] &= ~0x00000200u;
}
void PbfGatekeeperConfig::clear_publish_if_has_lidar() {
  publish_if_has_lidar_ = true;
  clear_has_publish_if_has_lidar();
}
bool PbfGatekeeperConfig::publish_if_has_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_lidar)
  return publish_if_has_lidar_;
}
void PbfGatekeeperConfig::set_publish_if_has_lidar(bool value) {
  set_has_publish_if_has_lidar();
  publish_if_has_lidar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_lidar)
}

// optional bool publish_if_has_radar = 2 [default = true];
bool PbfGatekeeperConfig::has_publish_if_has_radar() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PbfGatekeeperConfig::set_has_publish_if_has_radar() {
  _has_bits_[0] |= 0x00000400u;
}
void PbfGatekeeperConfig::clear_has_publish_if_has_radar() {
  _has_bits_[0] &= ~0x00000400u;
}
void PbfGatekeeperConfig::clear_publish_if_has_radar() {
  publish_if_has_radar_ = true;
  clear_has_publish_if_has_radar();
}
bool PbfGatekeeperConfig::publish_if_has_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_radar)
  return publish_if_has_radar_;
}
void PbfGatekeeperConfig::set_publish_if_has_radar(bool value) {
  set_has_publish_if_has_radar();
  publish_if_has_radar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_radar)
}

// optional bool publish_if_has_camera = 3 [default = true];
bool PbfGatekeeperConfig::has_publish_if_has_camera() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PbfGatekeeperConfig::set_has_publish_if_has_camera() {
  _has_bits_[0] |= 0x00000800u;
}
void PbfGatekeeperConfig::clear_has_publish_if_has_camera() {
  _has_bits_[0] &= ~0x00000800u;
}
void PbfGatekeeperConfig::clear_publish_if_has_camera() {
  publish_if_has_camera_ = true;
  clear_has_publish_if_has_camera();
}
bool PbfGatekeeperConfig::publish_if_has_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_camera)
  return publish_if_has_camera_;
}
void PbfGatekeeperConfig::set_publish_if_has_camera(bool value) {
  set_has_publish_if_has_camera();
  publish_if_has_camera_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_camera)
}

// optional bool use_camera_3d = 4 [default = true];
bool PbfGatekeeperConfig::has_use_camera_3d() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PbfGatekeeperConfig::set_has_use_camera_3d() {
  _has_bits_[0] |= 0x00001000u;
}
void PbfGatekeeperConfig::clear_has_use_camera_3d() {
  _has_bits_[0] &= ~0x00001000u;
}
void PbfGatekeeperConfig::clear_use_camera_3d() {
  use_camera_3d_ = true;
  clear_has_use_camera_3d();
}
bool PbfGatekeeperConfig::use_camera_3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.use_camera_3d)
  return use_camera_3d_;
}
void PbfGatekeeperConfig::set_use_camera_3d(bool value) {
  set_has_use_camera_3d();
  use_camera_3d_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.use_camera_3d)
}

// optional double min_radar_confident_distance = 5;
bool PbfGatekeeperConfig::has_min_radar_confident_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PbfGatekeeperConfig::set_has_min_radar_confident_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void PbfGatekeeperConfig::clear_has_min_radar_confident_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void PbfGatekeeperConfig::clear_min_radar_confident_distance() {
  min_radar_confident_distance_ = 0;
  clear_has_min_radar_confident_distance();
}
double PbfGatekeeperConfig::min_radar_confident_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.min_radar_confident_distance)
  return min_radar_confident_distance_;
}
void PbfGatekeeperConfig::set_min_radar_confident_distance(double value) {
  set_has_min_radar_confident_distance();
  min_radar_confident_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.min_radar_confident_distance)
}

// optional double max_radar_confident_angle = 6;
bool PbfGatekeeperConfig::has_max_radar_confident_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PbfGatekeeperConfig::set_has_max_radar_confident_angle() {
  _has_bits_[0] |= 0x00000002u;
}
void PbfGatekeeperConfig::clear_has_max_radar_confident_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
void PbfGatekeeperConfig::clear_max_radar_confident_angle() {
  max_radar_confident_angle_ = 0;
  clear_has_max_radar_confident_angle();
}
double PbfGatekeeperConfig::max_radar_confident_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.max_radar_confident_angle)
  return max_radar_confident_angle_;
}
void PbfGatekeeperConfig::set_max_radar_confident_angle(double value) {
  set_has_max_radar_confident_angle();
  max_radar_confident_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.max_radar_confident_angle)
}

// optional double min_camera_publish_distance = 7;
bool PbfGatekeeperConfig::has_min_camera_publish_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PbfGatekeeperConfig::set_has_min_camera_publish_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void PbfGatekeeperConfig::clear_has_min_camera_publish_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void PbfGatekeeperConfig::clear_min_camera_publish_distance() {
  min_camera_publish_distance_ = 0;
  clear_has_min_camera_publish_distance();
}
double PbfGatekeeperConfig::min_camera_publish_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.min_camera_publish_distance)
  return min_camera_publish_distance_;
}
void PbfGatekeeperConfig::set_min_camera_publish_distance(double value) {
  set_has_min_camera_publish_distance();
  min_camera_publish_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.min_camera_publish_distance)
}

// optional double invisible_period_threshold = 8;
bool PbfGatekeeperConfig::has_invisible_period_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PbfGatekeeperConfig::set_has_invisible_period_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
void PbfGatekeeperConfig::clear_has_invisible_period_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
void PbfGatekeeperConfig::clear_invisible_period_threshold() {
  invisible_period_threshold_ = 0;
  clear_has_invisible_period_threshold();
}
double PbfGatekeeperConfig::invisible_period_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.invisible_period_threshold)
  return invisible_period_threshold_;
}
void PbfGatekeeperConfig::set_invisible_period_threshold(double value) {
  set_has_invisible_period_threshold();
  invisible_period_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.invisible_period_threshold)
}

// optional double toic_threshold = 9;
bool PbfGatekeeperConfig::has_toic_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PbfGatekeeperConfig::set_has_toic_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void PbfGatekeeperConfig::clear_has_toic_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void PbfGatekeeperConfig::clear_toic_threshold() {
  toic_threshold_ = 0;
  clear_has_toic_threshold();
}
double PbfGatekeeperConfig::toic_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.toic_threshold)
  return toic_threshold_;
}
void PbfGatekeeperConfig::set_toic_threshold(double value) {
  set_has_toic_threshold();
  toic_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.toic_threshold)
}

// optional bool use_track_time_pub_strategy = 10;
bool PbfGatekeeperConfig::has_use_track_time_pub_strategy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PbfGatekeeperConfig::set_has_use_track_time_pub_strategy() {
  _has_bits_[0] |= 0x00000020u;
}
void PbfGatekeeperConfig::clear_has_use_track_time_pub_strategy() {
  _has_bits_[0] &= ~0x00000020u;
}
void PbfGatekeeperConfig::clear_use_track_time_pub_strategy() {
  use_track_time_pub_strategy_ = false;
  clear_has_use_track_time_pub_strategy();
}
bool PbfGatekeeperConfig::use_track_time_pub_strategy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.use_track_time_pub_strategy)
  return use_track_time_pub_strategy_;
}
void PbfGatekeeperConfig::set_use_track_time_pub_strategy(bool value) {
  set_has_use_track_time_pub_strategy();
  use_track_time_pub_strategy_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.use_track_time_pub_strategy)
}

// optional int32 pub_track_time_thresh = 11;
bool PbfGatekeeperConfig::has_pub_track_time_thresh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PbfGatekeeperConfig::set_has_pub_track_time_thresh() {
  _has_bits_[0] |= 0x00000040u;
}
void PbfGatekeeperConfig::clear_has_pub_track_time_thresh() {
  _has_bits_[0] &= ~0x00000040u;
}
void PbfGatekeeperConfig::clear_pub_track_time_thresh() {
  pub_track_time_thresh_ = 0;
  clear_has_pub_track_time_thresh();
}
::google::protobuf::int32 PbfGatekeeperConfig::pub_track_time_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.pub_track_time_thresh)
  return pub_track_time_thresh_;
}
void PbfGatekeeperConfig::set_pub_track_time_thresh(::google::protobuf::int32 value) {
  set_has_pub_track_time_thresh();
  pub_track_time_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.pub_track_time_thresh)
}

// optional double existence_threshold = 12;
bool PbfGatekeeperConfig::has_existence_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PbfGatekeeperConfig::set_has_existence_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
void PbfGatekeeperConfig::clear_has_existence_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
void PbfGatekeeperConfig::clear_existence_threshold() {
  existence_threshold_ = 0;
  clear_has_existence_threshold();
}
double PbfGatekeeperConfig::existence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.existence_threshold)
  return existence_threshold_;
}
void PbfGatekeeperConfig::set_existence_threshold(double value) {
  set_has_existence_threshold();
  existence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.existence_threshold)
}

// optional double radar_existence_threshold = 13;
bool PbfGatekeeperConfig::has_radar_existence_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PbfGatekeeperConfig::set_has_radar_existence_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
void PbfGatekeeperConfig::clear_has_radar_existence_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
void PbfGatekeeperConfig::clear_radar_existence_threshold() {
  radar_existence_threshold_ = 0;
  clear_has_radar_existence_threshold();
}
double PbfGatekeeperConfig::radar_existence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.radar_existence_threshold)
  return radar_existence_threshold_;
}
void PbfGatekeeperConfig::set_radar_existence_threshold(double value) {
  set_has_radar_existence_threshold();
  radar_existence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.radar_existence_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
