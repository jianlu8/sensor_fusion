// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbf_gatekeeper_config.proto

#ifndef PROTOBUF_pbf_5fgatekeeper_5fconfig_2eproto__INCLUDED
#define PROTOBUF_pbf_5fgatekeeper_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace perception {
namespace fusion {
class PbfGatekeeperConfig;
class PbfGatekeeperConfigDefaultTypeInternal;
extern PbfGatekeeperConfigDefaultTypeInternal _PbfGatekeeperConfig_default_instance_;
}  // namespace fusion
}  // namespace perception
}  // namespace apollo

namespace apollo {
namespace perception {
namespace fusion {

namespace protobuf_pbf_5fgatekeeper_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_pbf_5fgatekeeper_5fconfig_2eproto

// ===================================================================

class PbfGatekeeperConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.fusion.PbfGatekeeperConfig) */ {
 public:
  PbfGatekeeperConfig();
  virtual ~PbfGatekeeperConfig();

  PbfGatekeeperConfig(const PbfGatekeeperConfig& from);

  inline PbfGatekeeperConfig& operator=(const PbfGatekeeperConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbfGatekeeperConfig& default_instance();

  static inline const PbfGatekeeperConfig* internal_default_instance() {
    return reinterpret_cast<const PbfGatekeeperConfig*>(
               &_PbfGatekeeperConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PbfGatekeeperConfig* other);

  // implements Message ----------------------------------------------

  inline PbfGatekeeperConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PbfGatekeeperConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PbfGatekeeperConfig& from);
  void MergeFrom(const PbfGatekeeperConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PbfGatekeeperConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double min_radar_confident_distance = 5;
  bool has_min_radar_confident_distance() const;
  void clear_min_radar_confident_distance();
  static const int kMinRadarConfidentDistanceFieldNumber = 5;
  double min_radar_confident_distance() const;
  void set_min_radar_confident_distance(double value);

  // optional double max_radar_confident_angle = 6;
  bool has_max_radar_confident_angle() const;
  void clear_max_radar_confident_angle();
  static const int kMaxRadarConfidentAngleFieldNumber = 6;
  double max_radar_confident_angle() const;
  void set_max_radar_confident_angle(double value);

  // optional double min_camera_publish_distance = 7;
  bool has_min_camera_publish_distance() const;
  void clear_min_camera_publish_distance();
  static const int kMinCameraPublishDistanceFieldNumber = 7;
  double min_camera_publish_distance() const;
  void set_min_camera_publish_distance(double value);

  // optional double invisible_period_threshold = 8;
  bool has_invisible_period_threshold() const;
  void clear_invisible_period_threshold();
  static const int kInvisiblePeriodThresholdFieldNumber = 8;
  double invisible_period_threshold() const;
  void set_invisible_period_threshold(double value);

  // optional double toic_threshold = 9;
  bool has_toic_threshold() const;
  void clear_toic_threshold();
  static const int kToicThresholdFieldNumber = 9;
  double toic_threshold() const;
  void set_toic_threshold(double value);

  // optional bool use_track_time_pub_strategy = 10;
  bool has_use_track_time_pub_strategy() const;
  void clear_use_track_time_pub_strategy();
  static const int kUseTrackTimePubStrategyFieldNumber = 10;
  bool use_track_time_pub_strategy() const;
  void set_use_track_time_pub_strategy(bool value);

  // optional int32 pub_track_time_thresh = 11;
  bool has_pub_track_time_thresh() const;
  void clear_pub_track_time_thresh();
  static const int kPubTrackTimeThreshFieldNumber = 11;
  ::google::protobuf::int32 pub_track_time_thresh() const;
  void set_pub_track_time_thresh(::google::protobuf::int32 value);

  // optional double existence_threshold = 12;
  bool has_existence_threshold() const;
  void clear_existence_threshold();
  static const int kExistenceThresholdFieldNumber = 12;
  double existence_threshold() const;
  void set_existence_threshold(double value);

  // optional double radar_existence_threshold = 13;
  bool has_radar_existence_threshold() const;
  void clear_radar_existence_threshold();
  static const int kRadarExistenceThresholdFieldNumber = 13;
  double radar_existence_threshold() const;
  void set_radar_existence_threshold(double value);

  // optional bool publish_if_has_lidar = 1 [default = true];
  bool has_publish_if_has_lidar() const;
  void clear_publish_if_has_lidar();
  static const int kPublishIfHasLidarFieldNumber = 1;
  bool publish_if_has_lidar() const;
  void set_publish_if_has_lidar(bool value);

  // optional bool publish_if_has_radar = 2 [default = true];
  bool has_publish_if_has_radar() const;
  void clear_publish_if_has_radar();
  static const int kPublishIfHasRadarFieldNumber = 2;
  bool publish_if_has_radar() const;
  void set_publish_if_has_radar(bool value);

  // optional bool publish_if_has_camera = 3 [default = true];
  bool has_publish_if_has_camera() const;
  void clear_publish_if_has_camera();
  static const int kPublishIfHasCameraFieldNumber = 3;
  bool publish_if_has_camera() const;
  void set_publish_if_has_camera(bool value);

  // optional bool use_camera_3d = 4 [default = true];
  bool has_use_camera_3d() const;
  void clear_use_camera_3d();
  static const int kUseCamera3DFieldNumber = 4;
  bool use_camera_3d() const;
  void set_use_camera_3d(bool value);

  // @@protoc_insertion_point(class_scope:apollo.perception.fusion.PbfGatekeeperConfig)
 private:
  void set_has_publish_if_has_lidar();
  void clear_has_publish_if_has_lidar();
  void set_has_publish_if_has_radar();
  void clear_has_publish_if_has_radar();
  void set_has_publish_if_has_camera();
  void clear_has_publish_if_has_camera();
  void set_has_use_camera_3d();
  void clear_has_use_camera_3d();
  void set_has_min_radar_confident_distance();
  void clear_has_min_radar_confident_distance();
  void set_has_max_radar_confident_angle();
  void clear_has_max_radar_confident_angle();
  void set_has_min_camera_publish_distance();
  void clear_has_min_camera_publish_distance();
  void set_has_invisible_period_threshold();
  void clear_has_invisible_period_threshold();
  void set_has_toic_threshold();
  void clear_has_toic_threshold();
  void set_has_use_track_time_pub_strategy();
  void clear_has_use_track_time_pub_strategy();
  void set_has_pub_track_time_thresh();
  void clear_has_pub_track_time_thresh();
  void set_has_existence_threshold();
  void clear_has_existence_threshold();
  void set_has_radar_existence_threshold();
  void clear_has_radar_existence_threshold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double min_radar_confident_distance_;
  double max_radar_confident_angle_;
  double min_camera_publish_distance_;
  double invisible_period_threshold_;
  double toic_threshold_;
  bool use_track_time_pub_strategy_;
  ::google::protobuf::int32 pub_track_time_thresh_;
  double existence_threshold_;
  double radar_existence_threshold_;
  bool publish_if_has_lidar_;
  bool publish_if_has_radar_;
  bool publish_if_has_camera_;
  bool use_camera_3d_;
  friend struct protobuf_pbf_5fgatekeeper_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PbfGatekeeperConfig

// optional bool publish_if_has_lidar = 1 [default = true];
inline bool PbfGatekeeperConfig::has_publish_if_has_lidar() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PbfGatekeeperConfig::set_has_publish_if_has_lidar() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PbfGatekeeperConfig::clear_has_publish_if_has_lidar() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PbfGatekeeperConfig::clear_publish_if_has_lidar() {
  publish_if_has_lidar_ = true;
  clear_has_publish_if_has_lidar();
}
inline bool PbfGatekeeperConfig::publish_if_has_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_lidar)
  return publish_if_has_lidar_;
}
inline void PbfGatekeeperConfig::set_publish_if_has_lidar(bool value) {
  set_has_publish_if_has_lidar();
  publish_if_has_lidar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_lidar)
}

// optional bool publish_if_has_radar = 2 [default = true];
inline bool PbfGatekeeperConfig::has_publish_if_has_radar() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PbfGatekeeperConfig::set_has_publish_if_has_radar() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PbfGatekeeperConfig::clear_has_publish_if_has_radar() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PbfGatekeeperConfig::clear_publish_if_has_radar() {
  publish_if_has_radar_ = true;
  clear_has_publish_if_has_radar();
}
inline bool PbfGatekeeperConfig::publish_if_has_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_radar)
  return publish_if_has_radar_;
}
inline void PbfGatekeeperConfig::set_publish_if_has_radar(bool value) {
  set_has_publish_if_has_radar();
  publish_if_has_radar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_radar)
}

// optional bool publish_if_has_camera = 3 [default = true];
inline bool PbfGatekeeperConfig::has_publish_if_has_camera() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PbfGatekeeperConfig::set_has_publish_if_has_camera() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PbfGatekeeperConfig::clear_has_publish_if_has_camera() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PbfGatekeeperConfig::clear_publish_if_has_camera() {
  publish_if_has_camera_ = true;
  clear_has_publish_if_has_camera();
}
inline bool PbfGatekeeperConfig::publish_if_has_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_camera)
  return publish_if_has_camera_;
}
inline void PbfGatekeeperConfig::set_publish_if_has_camera(bool value) {
  set_has_publish_if_has_camera();
  publish_if_has_camera_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.publish_if_has_camera)
}

// optional bool use_camera_3d = 4 [default = true];
inline bool PbfGatekeeperConfig::has_use_camera_3d() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PbfGatekeeperConfig::set_has_use_camera_3d() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PbfGatekeeperConfig::clear_has_use_camera_3d() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PbfGatekeeperConfig::clear_use_camera_3d() {
  use_camera_3d_ = true;
  clear_has_use_camera_3d();
}
inline bool PbfGatekeeperConfig::use_camera_3d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.use_camera_3d)
  return use_camera_3d_;
}
inline void PbfGatekeeperConfig::set_use_camera_3d(bool value) {
  set_has_use_camera_3d();
  use_camera_3d_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.use_camera_3d)
}

// optional double min_radar_confident_distance = 5;
inline bool PbfGatekeeperConfig::has_min_radar_confident_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbfGatekeeperConfig::set_has_min_radar_confident_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbfGatekeeperConfig::clear_has_min_radar_confident_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbfGatekeeperConfig::clear_min_radar_confident_distance() {
  min_radar_confident_distance_ = 0;
  clear_has_min_radar_confident_distance();
}
inline double PbfGatekeeperConfig::min_radar_confident_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.min_radar_confident_distance)
  return min_radar_confident_distance_;
}
inline void PbfGatekeeperConfig::set_min_radar_confident_distance(double value) {
  set_has_min_radar_confident_distance();
  min_radar_confident_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.min_radar_confident_distance)
}

// optional double max_radar_confident_angle = 6;
inline bool PbfGatekeeperConfig::has_max_radar_confident_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbfGatekeeperConfig::set_has_max_radar_confident_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbfGatekeeperConfig::clear_has_max_radar_confident_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbfGatekeeperConfig::clear_max_radar_confident_angle() {
  max_radar_confident_angle_ = 0;
  clear_has_max_radar_confident_angle();
}
inline double PbfGatekeeperConfig::max_radar_confident_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.max_radar_confident_angle)
  return max_radar_confident_angle_;
}
inline void PbfGatekeeperConfig::set_max_radar_confident_angle(double value) {
  set_has_max_radar_confident_angle();
  max_radar_confident_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.max_radar_confident_angle)
}

// optional double min_camera_publish_distance = 7;
inline bool PbfGatekeeperConfig::has_min_camera_publish_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbfGatekeeperConfig::set_has_min_camera_publish_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbfGatekeeperConfig::clear_has_min_camera_publish_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbfGatekeeperConfig::clear_min_camera_publish_distance() {
  min_camera_publish_distance_ = 0;
  clear_has_min_camera_publish_distance();
}
inline double PbfGatekeeperConfig::min_camera_publish_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.min_camera_publish_distance)
  return min_camera_publish_distance_;
}
inline void PbfGatekeeperConfig::set_min_camera_publish_distance(double value) {
  set_has_min_camera_publish_distance();
  min_camera_publish_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.min_camera_publish_distance)
}

// optional double invisible_period_threshold = 8;
inline bool PbfGatekeeperConfig::has_invisible_period_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbfGatekeeperConfig::set_has_invisible_period_threshold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbfGatekeeperConfig::clear_has_invisible_period_threshold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbfGatekeeperConfig::clear_invisible_period_threshold() {
  invisible_period_threshold_ = 0;
  clear_has_invisible_period_threshold();
}
inline double PbfGatekeeperConfig::invisible_period_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.invisible_period_threshold)
  return invisible_period_threshold_;
}
inline void PbfGatekeeperConfig::set_invisible_period_threshold(double value) {
  set_has_invisible_period_threshold();
  invisible_period_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.invisible_period_threshold)
}

// optional double toic_threshold = 9;
inline bool PbfGatekeeperConfig::has_toic_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbfGatekeeperConfig::set_has_toic_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbfGatekeeperConfig::clear_has_toic_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbfGatekeeperConfig::clear_toic_threshold() {
  toic_threshold_ = 0;
  clear_has_toic_threshold();
}
inline double PbfGatekeeperConfig::toic_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.toic_threshold)
  return toic_threshold_;
}
inline void PbfGatekeeperConfig::set_toic_threshold(double value) {
  set_has_toic_threshold();
  toic_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.toic_threshold)
}

// optional bool use_track_time_pub_strategy = 10;
inline bool PbfGatekeeperConfig::has_use_track_time_pub_strategy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbfGatekeeperConfig::set_has_use_track_time_pub_strategy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbfGatekeeperConfig::clear_has_use_track_time_pub_strategy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbfGatekeeperConfig::clear_use_track_time_pub_strategy() {
  use_track_time_pub_strategy_ = false;
  clear_has_use_track_time_pub_strategy();
}
inline bool PbfGatekeeperConfig::use_track_time_pub_strategy() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.use_track_time_pub_strategy)
  return use_track_time_pub_strategy_;
}
inline void PbfGatekeeperConfig::set_use_track_time_pub_strategy(bool value) {
  set_has_use_track_time_pub_strategy();
  use_track_time_pub_strategy_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.use_track_time_pub_strategy)
}

// optional int32 pub_track_time_thresh = 11;
inline bool PbfGatekeeperConfig::has_pub_track_time_thresh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbfGatekeeperConfig::set_has_pub_track_time_thresh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbfGatekeeperConfig::clear_has_pub_track_time_thresh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbfGatekeeperConfig::clear_pub_track_time_thresh() {
  pub_track_time_thresh_ = 0;
  clear_has_pub_track_time_thresh();
}
inline ::google::protobuf::int32 PbfGatekeeperConfig::pub_track_time_thresh() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.pub_track_time_thresh)
  return pub_track_time_thresh_;
}
inline void PbfGatekeeperConfig::set_pub_track_time_thresh(::google::protobuf::int32 value) {
  set_has_pub_track_time_thresh();
  pub_track_time_thresh_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.pub_track_time_thresh)
}

// optional double existence_threshold = 12;
inline bool PbfGatekeeperConfig::has_existence_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PbfGatekeeperConfig::set_has_existence_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PbfGatekeeperConfig::clear_has_existence_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PbfGatekeeperConfig::clear_existence_threshold() {
  existence_threshold_ = 0;
  clear_has_existence_threshold();
}
inline double PbfGatekeeperConfig::existence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.existence_threshold)
  return existence_threshold_;
}
inline void PbfGatekeeperConfig::set_existence_threshold(double value) {
  set_has_existence_threshold();
  existence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.existence_threshold)
}

// optional double radar_existence_threshold = 13;
inline bool PbfGatekeeperConfig::has_radar_existence_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbfGatekeeperConfig::set_has_radar_existence_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbfGatekeeperConfig::clear_has_radar_existence_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbfGatekeeperConfig::clear_radar_existence_threshold() {
  radar_existence_threshold_ = 0;
  clear_has_radar_existence_threshold();
}
inline double PbfGatekeeperConfig::radar_existence_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfGatekeeperConfig.radar_existence_threshold)
  return radar_existence_threshold_;
}
inline void PbfGatekeeperConfig::set_radar_existence_threshold(double value) {
  set_has_radar_existence_threshold();
  radar_existence_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfGatekeeperConfig.radar_existence_threshold)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace fusion
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pbf_5fgatekeeper_5fconfig_2eproto__INCLUDED
