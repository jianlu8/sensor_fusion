// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: probabilistic_fusion_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "probabilistic_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace fusion {
class ProbabilisticFusionConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProbabilisticFusionConfig> {
} _ProbabilisticFusionConfig_default_instance_;

namespace protobuf_probabilistic_5ffusion_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, use_lidar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, use_radar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, use_camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, tracker_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, data_association_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, gate_keeper_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, prohibition_sensors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, max_lidar_invisible_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, max_radar_invisible_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, max_camera_invisible_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProbabilisticFusionConfig, max_cached_frame_num_),
  3,
  4,
  5,
  0,
  1,
  2,
  ~0u,
  6,
  7,
  8,
  9,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 16, sizeof(ProbabilisticFusionConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProbabilisticFusionConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "probabilistic_fusion_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProbabilisticFusionConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  ProbabilisticFusionConfig::_default_tracker_method_.Shutdown();
  ProbabilisticFusionConfig::_default_data_association_method_.Shutdown();
  ProbabilisticFusionConfig::_default_gate_keeper_method_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ProbabilisticFusionConfig::_default_tracker_method_.DefaultConstruct();
  *ProbabilisticFusionConfig::_default_tracker_method_.get_mutable() = ::std::string("PbfTracker", 10);
  ProbabilisticFusionConfig::_default_data_association_method_.DefaultConstruct();
  *ProbabilisticFusionConfig::_default_data_association_method_.get_mutable() = ::std::string("HMAssociation", 13);
  ProbabilisticFusionConfig::_default_gate_keeper_method_.DefaultConstruct();
  *ProbabilisticFusionConfig::_default_gate_keeper_method_.get_mutable() = ::std::string("PbfGatekeeper", 13);
  _ProbabilisticFusionConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!probabilistic_fusion_config.proto\022\030apo"
      "llo.perception.fusion\"\243\003\n\031ProbabilisticF"
      "usionConfig\022\027\n\tuse_lidar\030\001 \001(\010:\004true\022\027\n\t"
      "use_radar\030\002 \001(\010:\004true\022\030\n\nuse_camera\030\003 \001("
      "\010:\004true\022\"\n\016tracker_method\030\004 \001(\t:\nPbfTrac"
      "ker\022.\n\027data_association_method\030\005 \001(\t:\rHM"
      "Association\022)\n\022gate_keeper_method\030\006 \001(\t:"
      "\rPbfGatekeeper\022\033\n\023prohibition_sensors\030\007 "
      "\003(\t\022(\n\032max_lidar_invisible_period\030\010 \001(\001:"
      "\0040.25\022\'\n\032max_radar_invisible_period\030\t \001("
      "\001:\0030.5\022)\n\033max_camera_invisible_period\030\n "
      "\001(\001:\0040.75\022 \n\024max_cached_frame_num\030\013 \001(\003:"
      "\00250"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "probabilistic_fusion_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_probabilistic_5ffusion_5fconfig_2eproto


// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ProbabilisticFusionConfig::_default_tracker_method_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ProbabilisticFusionConfig::_default_data_association_method_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ProbabilisticFusionConfig::_default_gate_keeper_method_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProbabilisticFusionConfig::kUseLidarFieldNumber;
const int ProbabilisticFusionConfig::kUseRadarFieldNumber;
const int ProbabilisticFusionConfig::kUseCameraFieldNumber;
const int ProbabilisticFusionConfig::kTrackerMethodFieldNumber;
const int ProbabilisticFusionConfig::kDataAssociationMethodFieldNumber;
const int ProbabilisticFusionConfig::kGateKeeperMethodFieldNumber;
const int ProbabilisticFusionConfig::kProhibitionSensorsFieldNumber;
const int ProbabilisticFusionConfig::kMaxLidarInvisiblePeriodFieldNumber;
const int ProbabilisticFusionConfig::kMaxRadarInvisiblePeriodFieldNumber;
const int ProbabilisticFusionConfig::kMaxCameraInvisiblePeriodFieldNumber;
const int ProbabilisticFusionConfig::kMaxCachedFrameNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProbabilisticFusionConfig::ProbabilisticFusionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_probabilistic_5ffusion_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.fusion.ProbabilisticFusionConfig)
}
ProbabilisticFusionConfig::ProbabilisticFusionConfig(const ProbabilisticFusionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      prohibition_sensors_(from.prohibition_sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tracker_method_.UnsafeSetDefault(&ProbabilisticFusionConfig::_default_tracker_method_.get());
  if (from.has_tracker_method()) {
    tracker_method_.AssignWithDefault(&ProbabilisticFusionConfig::_default_tracker_method_.get(), from.tracker_method_);
  }
  data_association_method_.UnsafeSetDefault(&ProbabilisticFusionConfig::_default_data_association_method_.get());
  if (from.has_data_association_method()) {
    data_association_method_.AssignWithDefault(&ProbabilisticFusionConfig::_default_data_association_method_.get(), from.data_association_method_);
  }
  gate_keeper_method_.UnsafeSetDefault(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
  if (from.has_gate_keeper_method()) {
    gate_keeper_method_.AssignWithDefault(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get(), from.gate_keeper_method_);
  }
  ::memcpy(&use_lidar_, &from.use_lidar_,
    reinterpret_cast<char*>(&max_cached_frame_num_) -
    reinterpret_cast<char*>(&use_lidar_) + sizeof(max_cached_frame_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.ProbabilisticFusionConfig)
}

void ProbabilisticFusionConfig::SharedCtor() {
  _cached_size_ = 0;
  tracker_method_.UnsafeSetDefault(&ProbabilisticFusionConfig::_default_tracker_method_.get());
  data_association_method_.UnsafeSetDefault(&ProbabilisticFusionConfig::_default_data_association_method_.get());
  gate_keeper_method_.UnsafeSetDefault(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
  use_lidar_ = true;
  use_radar_ = true;
  use_camera_ = true;
  max_lidar_invisible_period_ = 0.25;
  max_radar_invisible_period_ = 0.5;
  max_camera_invisible_period_ = 0.75;
  max_cached_frame_num_ = GOOGLE_LONGLONG(50);
}

ProbabilisticFusionConfig::~ProbabilisticFusionConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.ProbabilisticFusionConfig)
  SharedDtor();
}

void ProbabilisticFusionConfig::SharedDtor() {
  tracker_method_.DestroyNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get());
  data_association_method_.DestroyNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get());
  gate_keeper_method_.DestroyNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
}

void ProbabilisticFusionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProbabilisticFusionConfig::descriptor() {
  protobuf_probabilistic_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_probabilistic_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProbabilisticFusionConfig& ProbabilisticFusionConfig::default_instance() {
  protobuf_probabilistic_5ffusion_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProbabilisticFusionConfig* ProbabilisticFusionConfig::New(::google::protobuf::Arena* arena) const {
  ProbabilisticFusionConfig* n = new ProbabilisticFusionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProbabilisticFusionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  prohibition_sensors_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_tracker_method()) {
      GOOGLE_DCHECK(!tracker_method_.IsDefault(&ProbabilisticFusionConfig::_default_tracker_method_.get()));
      (*tracker_method_.UnsafeRawStringPointer())->assign(*&ProbabilisticFusionConfig::_default_tracker_method_.get());
    }
    if (has_data_association_method()) {
      GOOGLE_DCHECK(!data_association_method_.IsDefault(&ProbabilisticFusionConfig::_default_data_association_method_.get()));
      (*data_association_method_.UnsafeRawStringPointer())->assign(*&ProbabilisticFusionConfig::_default_data_association_method_.get());
    }
    if (has_gate_keeper_method()) {
      GOOGLE_DCHECK(!gate_keeper_method_.IsDefault(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get()));
      (*gate_keeper_method_.UnsafeRawStringPointer())->assign(*&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
    }
    use_lidar_ = true;
    use_radar_ = true;
    use_camera_ = true;
    max_lidar_invisible_period_ = 0.25;
    max_radar_invisible_period_ = 0.5;
  }
  if (_has_bits_[8 / 32] & 768u) {
    max_camera_invisible_period_ = 0.75;
    max_cached_frame_num_ = GOOGLE_LONGLONG(50);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProbabilisticFusionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_lidar = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_use_lidar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lidar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_radar = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_use_radar();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_radar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_camera = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_camera();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tracker_method = 4 [default = "PbfTracker"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracker_method().data(), this->tracker_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_association_method = 5 [default = "HMAssociation"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_association_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_association_method().data(), this->data_association_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gate_keeper_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gate_keeper_method().data(), this->gate_keeper_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string prohibition_sensors = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_prohibition_sensors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prohibition_sensors(this->prohibition_sensors_size() - 1).data(),
            this->prohibition_sensors(this->prohibition_sensors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_lidar_invisible_period = 8 [default = 0.25];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_max_lidar_invisible_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_lidar_invisible_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_radar_invisible_period = 9 [default = 0.5];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_max_radar_invisible_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_radar_invisible_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_camera_invisible_period = 10 [default = 0.75];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_max_camera_invisible_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_camera_invisible_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_cached_frame_num = 11 [default = 50];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_max_cached_frame_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_cached_frame_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.fusion.ProbabilisticFusionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.fusion.ProbabilisticFusionConfig)
  return false;
#undef DO_
}

void ProbabilisticFusionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_lidar = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_lidar(), output);
  }

  // optional bool use_radar = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_radar(), output);
  }

  // optional bool use_camera = 3 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_camera(), output);
  }

  // optional string tracker_method = 4 [default = "PbfTracker"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_method().data(), this->tracker_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tracker_method(), output);
  }

  // optional string data_association_method = 5 [default = "HMAssociation"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_association_method().data(), this->data_association_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data_association_method(), output);
  }

  // optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gate_keeper_method().data(), this->gate_keeper_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gate_keeper_method(), output);
  }

  // repeated string prohibition_sensors = 7;
  for (int i = 0, n = this->prohibition_sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prohibition_sensors(i).data(), this->prohibition_sensors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->prohibition_sensors(i), output);
  }

  // optional double max_lidar_invisible_period = 8 [default = 0.25];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->max_lidar_invisible_period(), output);
  }

  // optional double max_radar_invisible_period = 9 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_radar_invisible_period(), output);
  }

  // optional double max_camera_invisible_period = 10 [default = 0.75];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_camera_invisible_period(), output);
  }

  // optional int64 max_cached_frame_num = 11 [default = 50];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->max_cached_frame_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.fusion.ProbabilisticFusionConfig)
}

::google::protobuf::uint8* ProbabilisticFusionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool use_lidar = 1 [default = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_lidar(), target);
  }

  // optional bool use_radar = 2 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_radar(), target);
  }

  // optional bool use_camera = 3 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_camera(), target);
  }

  // optional string tracker_method = 4 [default = "PbfTracker"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_method().data(), this->tracker_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tracker_method(), target);
  }

  // optional string data_association_method = 5 [default = "HMAssociation"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_association_method().data(), this->data_association_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data_association_method(), target);
  }

  // optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gate_keeper_method().data(), this->gate_keeper_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gate_keeper_method(), target);
  }

  // repeated string prohibition_sensors = 7;
  for (int i = 0, n = this->prohibition_sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prohibition_sensors(i).data(), this->prohibition_sensors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->prohibition_sensors(i), target);
  }

  // optional double max_lidar_invisible_period = 8 [default = 0.25];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->max_lidar_invisible_period(), target);
  }

  // optional double max_radar_invisible_period = 9 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_radar_invisible_period(), target);
  }

  // optional double max_camera_invisible_period = 10 [default = 0.75];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_camera_invisible_period(), target);
  }

  // optional int64 max_cached_frame_num = 11 [default = 50];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->max_cached_frame_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.ProbabilisticFusionConfig)
  return target;
}

size_t ProbabilisticFusionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string prohibition_sensors = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->prohibition_sensors_size());
  for (int i = 0, n = this->prohibition_sensors_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->prohibition_sensors(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string tracker_method = 4 [default = "PbfTracker"];
    if (has_tracker_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker_method());
    }

    // optional string data_association_method = 5 [default = "HMAssociation"];
    if (has_data_association_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_association_method());
    }

    // optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
    if (has_gate_keeper_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gate_keeper_method());
    }

    // optional bool use_lidar = 1 [default = true];
    if (has_use_lidar()) {
      total_size += 1 + 1;
    }

    // optional bool use_radar = 2 [default = true];
    if (has_use_radar()) {
      total_size += 1 + 1;
    }

    // optional bool use_camera = 3 [default = true];
    if (has_use_camera()) {
      total_size += 1 + 1;
    }

    // optional double max_lidar_invisible_period = 8 [default = 0.25];
    if (has_max_lidar_invisible_period()) {
      total_size += 1 + 8;
    }

    // optional double max_radar_invisible_period = 9 [default = 0.5];
    if (has_max_radar_invisible_period()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double max_camera_invisible_period = 10 [default = 0.75];
    if (has_max_camera_invisible_period()) {
      total_size += 1 + 8;
    }

    // optional int64 max_cached_frame_num = 11 [default = 50];
    if (has_max_cached_frame_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_cached_frame_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProbabilisticFusionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ProbabilisticFusionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProbabilisticFusionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.fusion.ProbabilisticFusionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.fusion.ProbabilisticFusionConfig)
    MergeFrom(*source);
  }
}

void ProbabilisticFusionConfig::MergeFrom(const ProbabilisticFusionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prohibition_sensors_.MergeFrom(from.prohibition_sensors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tracker_method();
      tracker_method_.AssignWithDefault(&ProbabilisticFusionConfig::_default_tracker_method_.get(), from.tracker_method_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data_association_method();
      data_association_method_.AssignWithDefault(&ProbabilisticFusionConfig::_default_data_association_method_.get(), from.data_association_method_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gate_keeper_method();
      gate_keeper_method_.AssignWithDefault(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get(), from.gate_keeper_method_);
    }
    if (cached_has_bits & 0x00000008u) {
      use_lidar_ = from.use_lidar_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_radar_ = from.use_radar_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_camera_ = from.use_camera_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_lidar_invisible_period_ = from.max_lidar_invisible_period_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_radar_invisible_period_ = from.max_radar_invisible_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      max_camera_invisible_period_ = from.max_camera_invisible_period_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_cached_frame_num_ = from.max_cached_frame_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProbabilisticFusionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProbabilisticFusionConfig::CopyFrom(const ProbabilisticFusionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.ProbabilisticFusionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbabilisticFusionConfig::IsInitialized() const {
  return true;
}

void ProbabilisticFusionConfig::Swap(ProbabilisticFusionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProbabilisticFusionConfig::InternalSwap(ProbabilisticFusionConfig* other) {
  prohibition_sensors_.InternalSwap(&other->prohibition_sensors_);
  tracker_method_.Swap(&other->tracker_method_);
  data_association_method_.Swap(&other->data_association_method_);
  gate_keeper_method_.Swap(&other->gate_keeper_method_);
  std::swap(use_lidar_, other->use_lidar_);
  std::swap(use_radar_, other->use_radar_);
  std::swap(use_camera_, other->use_camera_);
  std::swap(max_lidar_invisible_period_, other->max_lidar_invisible_period_);
  std::swap(max_radar_invisible_period_, other->max_radar_invisible_period_);
  std::swap(max_camera_invisible_period_, other->max_camera_invisible_period_);
  std::swap(max_cached_frame_num_, other->max_cached_frame_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProbabilisticFusionConfig::GetMetadata() const {
  protobuf_probabilistic_5ffusion_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_probabilistic_5ffusion_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProbabilisticFusionConfig

// optional bool use_lidar = 1 [default = true];
bool ProbabilisticFusionConfig::has_use_lidar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProbabilisticFusionConfig::set_has_use_lidar() {
  _has_bits_[0] |= 0x00000008u;
}
void ProbabilisticFusionConfig::clear_has_use_lidar() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProbabilisticFusionConfig::clear_use_lidar() {
  use_lidar_ = true;
  clear_has_use_lidar();
}
bool ProbabilisticFusionConfig::use_lidar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.use_lidar)
  return use_lidar_;
}
void ProbabilisticFusionConfig::set_use_lidar(bool value) {
  set_has_use_lidar();
  use_lidar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.use_lidar)
}

// optional bool use_radar = 2 [default = true];
bool ProbabilisticFusionConfig::has_use_radar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProbabilisticFusionConfig::set_has_use_radar() {
  _has_bits_[0] |= 0x00000010u;
}
void ProbabilisticFusionConfig::clear_has_use_radar() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProbabilisticFusionConfig::clear_use_radar() {
  use_radar_ = true;
  clear_has_use_radar();
}
bool ProbabilisticFusionConfig::use_radar() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.use_radar)
  return use_radar_;
}
void ProbabilisticFusionConfig::set_use_radar(bool value) {
  set_has_use_radar();
  use_radar_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.use_radar)
}

// optional bool use_camera = 3 [default = true];
bool ProbabilisticFusionConfig::has_use_camera() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ProbabilisticFusionConfig::set_has_use_camera() {
  _has_bits_[0] |= 0x00000020u;
}
void ProbabilisticFusionConfig::clear_has_use_camera() {
  _has_bits_[0] &= ~0x00000020u;
}
void ProbabilisticFusionConfig::clear_use_camera() {
  use_camera_ = true;
  clear_has_use_camera();
}
bool ProbabilisticFusionConfig::use_camera() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.use_camera)
  return use_camera_;
}
void ProbabilisticFusionConfig::set_use_camera(bool value) {
  set_has_use_camera();
  use_camera_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.use_camera)
}

// optional string tracker_method = 4 [default = "PbfTracker"];
bool ProbabilisticFusionConfig::has_tracker_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProbabilisticFusionConfig::set_has_tracker_method() {
  _has_bits_[0] |= 0x00000001u;
}
void ProbabilisticFusionConfig::clear_has_tracker_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProbabilisticFusionConfig::clear_tracker_method() {
  tracker_method_.ClearToDefaultNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get());
  clear_has_tracker_method();
}
const ::std::string& ProbabilisticFusionConfig::tracker_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
  return tracker_method_.GetNoArena();
}
void ProbabilisticFusionConfig::set_tracker_method(const ::std::string& value) {
  set_has_tracker_method();
  tracker_method_.SetNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
#if LANG_CXX11
void ProbabilisticFusionConfig::set_tracker_method(::std::string&& value) {
  set_has_tracker_method();
  tracker_method_.SetNoArena(
    &ProbabilisticFusionConfig::_default_tracker_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
#endif
void ProbabilisticFusionConfig::set_tracker_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tracker_method();
  tracker_method_.SetNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
void ProbabilisticFusionConfig::set_tracker_method(const char* value, size_t size) {
  set_has_tracker_method();
  tracker_method_.SetNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}
::std::string* ProbabilisticFusionConfig::mutable_tracker_method() {
  set_has_tracker_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
  return tracker_method_.MutableNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get());
}
::std::string* ProbabilisticFusionConfig::release_tracker_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
  clear_has_tracker_method();
  return tracker_method_.ReleaseNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get());
}
void ProbabilisticFusionConfig::set_allocated_tracker_method(::std::string* tracker_method) {
  if (tracker_method != NULL) {
    set_has_tracker_method();
  } else {
    clear_has_tracker_method();
  }
  tracker_method_.SetAllocatedNoArena(&ProbabilisticFusionConfig::_default_tracker_method_.get(), tracker_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.ProbabilisticFusionConfig.tracker_method)
}

// optional string data_association_method = 5 [default = "HMAssociation"];
bool ProbabilisticFusionConfig::has_data_association_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProbabilisticFusionConfig::set_has_data_association_method() {
  _has_bits_[0] |= 0x00000002u;
}
void ProbabilisticFusionConfig::clear_has_data_association_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProbabilisticFusionConfig::clear_data_association_method() {
  data_association_method_.ClearToDefaultNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get());
  clear_has_data_association_method();
}
const ::std::string& ProbabilisticFusionConfig::data_association_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
  return data_association_method_.GetNoArena();
}
void ProbabilisticFusionConfig::set_data_association_method(const ::std::string& value) {
  set_has_data_association_method();
  data_association_method_.SetNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
#if LANG_CXX11
void ProbabilisticFusionConfig::set_data_association_method(::std::string&& value) {
  set_has_data_association_method();
  data_association_method_.SetNoArena(
    &ProbabilisticFusionConfig::_default_data_association_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
#endif
void ProbabilisticFusionConfig::set_data_association_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_association_method();
  data_association_method_.SetNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
void ProbabilisticFusionConfig::set_data_association_method(const char* value, size_t size) {
  set_has_data_association_method();
  data_association_method_.SetNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}
::std::string* ProbabilisticFusionConfig::mutable_data_association_method() {
  set_has_data_association_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
  return data_association_method_.MutableNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get());
}
::std::string* ProbabilisticFusionConfig::release_data_association_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
  clear_has_data_association_method();
  return data_association_method_.ReleaseNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get());
}
void ProbabilisticFusionConfig::set_allocated_data_association_method(::std::string* data_association_method) {
  if (data_association_method != NULL) {
    set_has_data_association_method();
  } else {
    clear_has_data_association_method();
  }
  data_association_method_.SetAllocatedNoArena(&ProbabilisticFusionConfig::_default_data_association_method_.get(), data_association_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.ProbabilisticFusionConfig.data_association_method)
}

// optional string gate_keeper_method = 6 [default = "PbfGatekeeper"];
bool ProbabilisticFusionConfig::has_gate_keeper_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProbabilisticFusionConfig::set_has_gate_keeper_method() {
  _has_bits_[0] |= 0x00000004u;
}
void ProbabilisticFusionConfig::clear_has_gate_keeper_method() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProbabilisticFusionConfig::clear_gate_keeper_method() {
  gate_keeper_method_.ClearToDefaultNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
  clear_has_gate_keeper_method();
}
const ::std::string& ProbabilisticFusionConfig::gate_keeper_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
  return gate_keeper_method_.GetNoArena();
}
void ProbabilisticFusionConfig::set_gate_keeper_method(const ::std::string& value) {
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
#if LANG_CXX11
void ProbabilisticFusionConfig::set_gate_keeper_method(::std::string&& value) {
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(
    &ProbabilisticFusionConfig::_default_gate_keeper_method_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
#endif
void ProbabilisticFusionConfig::set_gate_keeper_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
void ProbabilisticFusionConfig::set_gate_keeper_method(const char* value, size_t size) {
  set_has_gate_keeper_method();
  gate_keeper_method_.SetNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}
::std::string* ProbabilisticFusionConfig::mutable_gate_keeper_method() {
  set_has_gate_keeper_method();
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
  return gate_keeper_method_.MutableNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
}
::std::string* ProbabilisticFusionConfig::release_gate_keeper_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
  clear_has_gate_keeper_method();
  return gate_keeper_method_.ReleaseNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get());
}
void ProbabilisticFusionConfig::set_allocated_gate_keeper_method(::std::string* gate_keeper_method) {
  if (gate_keeper_method != NULL) {
    set_has_gate_keeper_method();
  } else {
    clear_has_gate_keeper_method();
  }
  gate_keeper_method_.SetAllocatedNoArena(&ProbabilisticFusionConfig::_default_gate_keeper_method_.get(), gate_keeper_method);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.ProbabilisticFusionConfig.gate_keeper_method)
}

// repeated string prohibition_sensors = 7;
int ProbabilisticFusionConfig::prohibition_sensors_size() const {
  return prohibition_sensors_.size();
}
void ProbabilisticFusionConfig::clear_prohibition_sensors() {
  prohibition_sensors_.Clear();
}
const ::std::string& ProbabilisticFusionConfig::prohibition_sensors(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_.Get(index);
}
::std::string* ProbabilisticFusionConfig::mutable_prohibition_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_.Mutable(index);
}
void ProbabilisticFusionConfig::set_prohibition_sensors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  prohibition_sensors_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProbabilisticFusionConfig::set_prohibition_sensors(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  prohibition_sensors_.Mutable(index)->assign(std::move(value));
}
#endif
void ProbabilisticFusionConfig::set_prohibition_sensors(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  prohibition_sensors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
void ProbabilisticFusionConfig::set_prohibition_sensors(int index, const char* value, size_t size) {
  prohibition_sensors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
::std::string* ProbabilisticFusionConfig::add_prohibition_sensors() {
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_.Add();
}
void ProbabilisticFusionConfig::add_prohibition_sensors(const ::std::string& value) {
  prohibition_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
#if LANG_CXX11
void ProbabilisticFusionConfig::add_prohibition_sensors(::std::string&& value) {
  prohibition_sensors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
#endif
void ProbabilisticFusionConfig::add_prohibition_sensors(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  prohibition_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
void ProbabilisticFusionConfig::add_prohibition_sensors(const char* value, size_t size) {
  prohibition_sensors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProbabilisticFusionConfig::prohibition_sensors() const {
  // @@protoc_insertion_point(field_list:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return prohibition_sensors_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProbabilisticFusionConfig::mutable_prohibition_sensors() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.fusion.ProbabilisticFusionConfig.prohibition_sensors)
  return &prohibition_sensors_;
}

// optional double max_lidar_invisible_period = 8 [default = 0.25];
bool ProbabilisticFusionConfig::has_max_lidar_invisible_period() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ProbabilisticFusionConfig::set_has_max_lidar_invisible_period() {
  _has_bits_[0] |= 0x00000040u;
}
void ProbabilisticFusionConfig::clear_has_max_lidar_invisible_period() {
  _has_bits_[0] &= ~0x00000040u;
}
void ProbabilisticFusionConfig::clear_max_lidar_invisible_period() {
  max_lidar_invisible_period_ = 0.25;
  clear_has_max_lidar_invisible_period();
}
double ProbabilisticFusionConfig::max_lidar_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_lidar_invisible_period)
  return max_lidar_invisible_period_;
}
void ProbabilisticFusionConfig::set_max_lidar_invisible_period(double value) {
  set_has_max_lidar_invisible_period();
  max_lidar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_lidar_invisible_period)
}

// optional double max_radar_invisible_period = 9 [default = 0.5];
bool ProbabilisticFusionConfig::has_max_radar_invisible_period() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ProbabilisticFusionConfig::set_has_max_radar_invisible_period() {
  _has_bits_[0] |= 0x00000080u;
}
void ProbabilisticFusionConfig::clear_has_max_radar_invisible_period() {
  _has_bits_[0] &= ~0x00000080u;
}
void ProbabilisticFusionConfig::clear_max_radar_invisible_period() {
  max_radar_invisible_period_ = 0.5;
  clear_has_max_radar_invisible_period();
}
double ProbabilisticFusionConfig::max_radar_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_radar_invisible_period)
  return max_radar_invisible_period_;
}
void ProbabilisticFusionConfig::set_max_radar_invisible_period(double value) {
  set_has_max_radar_invisible_period();
  max_radar_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_radar_invisible_period)
}

// optional double max_camera_invisible_period = 10 [default = 0.75];
bool ProbabilisticFusionConfig::has_max_camera_invisible_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ProbabilisticFusionConfig::set_has_max_camera_invisible_period() {
  _has_bits_[0] |= 0x00000100u;
}
void ProbabilisticFusionConfig::clear_has_max_camera_invisible_period() {
  _has_bits_[0] &= ~0x00000100u;
}
void ProbabilisticFusionConfig::clear_max_camera_invisible_period() {
  max_camera_invisible_period_ = 0.75;
  clear_has_max_camera_invisible_period();
}
double ProbabilisticFusionConfig::max_camera_invisible_period() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_camera_invisible_period)
  return max_camera_invisible_period_;
}
void ProbabilisticFusionConfig::set_max_camera_invisible_period(double value) {
  set_has_max_camera_invisible_period();
  max_camera_invisible_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_camera_invisible_period)
}

// optional int64 max_cached_frame_num = 11 [default = 50];
bool ProbabilisticFusionConfig::has_max_cached_frame_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ProbabilisticFusionConfig::set_has_max_cached_frame_num() {
  _has_bits_[0] |= 0x00000200u;
}
void ProbabilisticFusionConfig::clear_has_max_cached_frame_num() {
  _has_bits_[0] &= ~0x00000200u;
}
void ProbabilisticFusionConfig::clear_max_cached_frame_num() {
  max_cached_frame_num_ = GOOGLE_LONGLONG(50);
  clear_has_max_cached_frame_num();
}
::google::protobuf::int64 ProbabilisticFusionConfig::max_cached_frame_num() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.ProbabilisticFusionConfig.max_cached_frame_num)
  return max_cached_frame_num_;
}
void ProbabilisticFusionConfig::set_max_cached_frame_num(::google::protobuf::int64 value) {
  set_has_max_cached_frame_num();
  max_cached_frame_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.ProbabilisticFusionConfig.max_cached_frame_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
