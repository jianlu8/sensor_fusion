// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pnc_point.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pnc_point.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace common {
class SLPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLPoint> {
} _SLPoint_default_instance_;
class FrenetFramePointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrenetFramePoint> {
} _FrenetFramePoint_default_instance_;
class SpeedPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpeedPoint> {
} _SpeedPoint_default_instance_;
class PathPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PathPoint> {
} _PathPoint_default_instance_;
class PathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Path> {
} _Path_default_instance_;
class TrajectoryPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPoint> {
} _TrajectoryPoint_default_instance_;
class TrajectoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Trajectory> {
} _Trajectory_default_instance_;
class VehicleMotionPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleMotionPoint> {
} _VehicleMotionPoint_default_instance_;
class VehicleMotionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleMotion> {
} _VehicleMotion_default_instance_;
class GaussianInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GaussianInfo> {
} _GaussianInfo_default_instance_;

namespace protobuf_pnc_5fpoint_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SLPoint, l_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrenetFramePoint, ddl_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedPoint, da_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, dkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, ddkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, x_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathPoint, y_derivative_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, path_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, relative_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, da_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryPoint, gaussian_info_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotionPoint, steer_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VehicleMotion, vehicle_motion_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, sigma_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, sigma_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, correlation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, area_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, ellipse_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, ellipse_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaussianInfo, theta_a_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(SLPoint)},
  { 9, 18, sizeof(FrenetFramePoint)},
  { 22, 32, sizeof(SpeedPoint)},
  { 37, 53, sizeof(PathPoint)},
  { 64, 71, sizeof(Path)},
  { 73, 85, sizeof(TrajectoryPoint)},
  { 92, 99, sizeof(Trajectory)},
  { 101, 108, sizeof(VehicleMotionPoint)},
  { 110, 117, sizeof(VehicleMotion)},
  { 119, 131, sizeof(GaussianInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SLPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrenetFramePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpeedPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PathPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleMotionPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VehicleMotion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GaussianInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pnc_point.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _SLPoint_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FrenetFramePoint_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SpeedPoint_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PathPoint_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Path_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _TrajectoryPoint_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Trajectory_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _VehicleMotionPoint_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _VehicleMotion_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GaussianInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SLPoint_default_instance_.DefaultConstruct();
  _FrenetFramePoint_default_instance_.DefaultConstruct();
  _SpeedPoint_default_instance_.DefaultConstruct();
  _PathPoint_default_instance_.DefaultConstruct();
  _Path_default_instance_.DefaultConstruct();
  _TrajectoryPoint_default_instance_.DefaultConstruct();
  _Trajectory_default_instance_.DefaultConstruct();
  _VehicleMotionPoint_default_instance_.DefaultConstruct();
  _VehicleMotion_default_instance_.DefaultConstruct();
  _GaussianInfo_default_instance_.DefaultConstruct();
  _TrajectoryPoint_default_instance_.get_mutable()->path_point_ = const_cast< ::apollo::common::PathPoint*>(
      ::apollo::common::PathPoint::internal_default_instance());
  _TrajectoryPoint_default_instance_.get_mutable()->gaussian_info_ = const_cast< ::apollo::common::GaussianInfo*>(
      ::apollo::common::GaussianInfo::internal_default_instance());
  _VehicleMotionPoint_default_instance_.get_mutable()->trajectory_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017pnc_point.proto\022\rapollo.common\"\037\n\007SLPo"
      "int\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\"A\n\020FrenetFrame"
      "Point\022\t\n\001s\030\001 \001(\001\022\t\n\001l\030\002 \001(\001\022\n\n\002dl\030\003 \001(\001\022"
      "\013\n\003ddl\030\004 \001(\001\"D\n\nSpeedPoint\022\t\n\001s\030\001 \001(\001\022\t\n"
      "\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\n\n\002da\030\005 \001"
      "(\001\"\263\001\n\tPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t"
      "\n\001z\030\003 \001(\001\022\r\n\005theta\030\004 \001(\001\022\r\n\005kappa\030\005 \001(\001\022"
      "\t\n\001s\030\006 \001(\001\022\016\n\006dkappa\030\007 \001(\001\022\017\n\007ddkappa\030\010 "
      "\001(\001\022\017\n\007lane_id\030\t \001(\t\022\024\n\014x_derivative\030\n \001"
      "(\001\022\024\n\014y_derivative\030\013 \001(\001\"B\n\004Path\022\014\n\004name"
      "\030\001 \001(\t\022,\n\npath_point\030\002 \003(\0132\030.apollo.comm"
      "on.PathPoint\"\273\001\n\017TrajectoryPoint\022,\n\npath"
      "_point\030\001 \001(\0132\030.apollo.common.PathPoint\022\t"
      "\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001(\001\022\025\n\rrelative_time\030\004 "
      "\001(\001\022\n\n\002da\030\005 \001(\001\022\r\n\005steer\030\006 \001(\001\0222\n\rgaussi"
      "an_info\030\007 \001(\0132\033.apollo.common.GaussianIn"
      "fo\"T\n\nTrajectory\022\014\n\004name\030\001 \001(\t\0228\n\020trajec"
      "tory_point\030\002 \003(\0132\036.apollo.common.Traject"
      "oryPoint\"]\n\022VehicleMotionPoint\0228\n\020trajec"
      "tory_point\030\001 \001(\0132\036.apollo.common.Traject"
      "oryPoint\022\r\n\005steer\030\002 \001(\001\"^\n\rVehicleMotion"
      "\022\014\n\004name\030\001 \001(\t\022\?\n\024vehicle_motion_point\030\002"
      " \003(\0132!.apollo.common.VehicleMotionPoint\""
      "\226\001\n\014GaussianInfo\022\017\n\007sigma_x\030\001 \001(\001\022\017\n\007sig"
      "ma_y\030\002 \001(\001\022\023\n\013correlation\030\003 \001(\001\022\030\n\020area_"
      "probability\030\004 \001(\001\022\021\n\tellipse_a\030\005 \001(\001\022\021\n\t"
      "ellipse_b\030\006 \001(\001\022\017\n\007theta_a\030\007 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1072);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pnc_point.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_pnc_5fpoint_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLPoint::kSFieldNumber;
const int SLPoint::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLPoint::SLPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.SLPoint)
}
SLPoint::SLPoint(const SLPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.SLPoint)
}

void SLPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_) + sizeof(l_));
}

SLPoint::~SLPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SLPoint)
  SharedDtor();
}

void SLPoint::SharedDtor() {
}

void SLPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SLPoint::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SLPoint& SLPoint::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLPoint* SLPoint::New(::google::protobuf::Arena* arena) const {
  SLPoint* n = new SLPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.SLPoint)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&s_) + sizeof(l_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.SLPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.SLPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.SLPoint)
  return false;
#undef DO_
}

void SLPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.SLPoint)
}

::google::protobuf::uint8* SLPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SLPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SLPoint)
  return target;
}

size_t SLPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.SLPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SLPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SLPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.SLPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.SLPoint)
    MergeFrom(*source);
  }
}

void SLPoint::MergeFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.SLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SLPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SLPoint::CopyFrom(const SLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.SLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLPoint::IsInitialized() const {
  return true;
}

void SLPoint::Swap(SLPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLPoint::InternalSwap(SLPoint* other) {
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SLPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLPoint

// optional double s = 1;
bool SLPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SLPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double SLPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.SLPoint.s)
  return s_;
}
void SLPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SLPoint.s)
}

// optional double l = 2;
bool SLPoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SLPoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
void SLPoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void SLPoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
double SLPoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.common.SLPoint.l)
  return l_;
}
void SLPoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SLPoint.l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrenetFramePoint::kSFieldNumber;
const int FrenetFramePoint::kLFieldNumber;
const int FrenetFramePoint::kDlFieldNumber;
const int FrenetFramePoint::kDdlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrenetFramePoint::FrenetFramePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.FrenetFramePoint)
}
FrenetFramePoint::FrenetFramePoint(const FrenetFramePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&ddl_) -
    reinterpret_cast<char*>(&s_) + sizeof(ddl_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.FrenetFramePoint)
}

void FrenetFramePoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&ddl_) -
    reinterpret_cast<char*>(&s_) + sizeof(ddl_));
}

FrenetFramePoint::~FrenetFramePoint() {
  // @@protoc_insertion_point(destructor:apollo.common.FrenetFramePoint)
  SharedDtor();
}

void FrenetFramePoint::SharedDtor() {
}

void FrenetFramePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrenetFramePoint::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrenetFramePoint& FrenetFramePoint::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrenetFramePoint* FrenetFramePoint::New(::google::protobuf::Arena* arena) const {
  FrenetFramePoint* n = new FrenetFramePoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrenetFramePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.FrenetFramePoint)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&ddl_) -
      reinterpret_cast<char*>(&s_) + sizeof(ddl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrenetFramePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.FrenetFramePoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ddl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.FrenetFramePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.FrenetFramePoint)
  return false;
#undef DO_
}

void FrenetFramePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.FrenetFramePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->l(), output);
  }

  // optional double dl = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dl(), output);
  }

  // optional double ddl = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ddl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.FrenetFramePoint)
}

::google::protobuf::uint8* FrenetFramePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.FrenetFramePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double l = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->l(), target);
  }

  // optional double dl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dl(), target);
  }

  // optional double ddl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ddl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.FrenetFramePoint)
  return target;
}

size_t FrenetFramePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.FrenetFramePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 2;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double dl = 3;
    if (has_dl()) {
      total_size += 1 + 8;
    }

    // optional double ddl = 4;
    if (has_ddl()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrenetFramePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const FrenetFramePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrenetFramePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.FrenetFramePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.FrenetFramePoint)
    MergeFrom(*source);
  }
}

void FrenetFramePoint::MergeFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.FrenetFramePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      dl_ = from.dl_;
    }
    if (cached_has_bits & 0x00000008u) {
      ddl_ = from.ddl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrenetFramePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrenetFramePoint::CopyFrom(const FrenetFramePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.FrenetFramePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrenetFramePoint::IsInitialized() const {
  return true;
}

void FrenetFramePoint::Swap(FrenetFramePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrenetFramePoint::InternalSwap(FrenetFramePoint* other) {
  std::swap(s_, other->s_);
  std::swap(l_, other->l_);
  std::swap(dl_, other->dl_);
  std::swap(ddl_, other->ddl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrenetFramePoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrenetFramePoint

// optional double s = 1;
bool FrenetFramePoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrenetFramePoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void FrenetFramePoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrenetFramePoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double FrenetFramePoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.s)
  return s_;
}
void FrenetFramePoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.s)
}

// optional double l = 2;
bool FrenetFramePoint::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrenetFramePoint::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
void FrenetFramePoint::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrenetFramePoint::clear_l() {
  l_ = 0;
  clear_has_l();
}
double FrenetFramePoint::l() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.l)
  return l_;
}
void FrenetFramePoint::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.l)
}

// optional double dl = 3;
bool FrenetFramePoint::has_dl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FrenetFramePoint::set_has_dl() {
  _has_bits_[0] |= 0x00000004u;
}
void FrenetFramePoint::clear_has_dl() {
  _has_bits_[0] &= ~0x00000004u;
}
void FrenetFramePoint::clear_dl() {
  dl_ = 0;
  clear_has_dl();
}
double FrenetFramePoint::dl() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.dl)
  return dl_;
}
void FrenetFramePoint::set_dl(double value) {
  set_has_dl();
  dl_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.dl)
}

// optional double ddl = 4;
bool FrenetFramePoint::has_ddl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FrenetFramePoint::set_has_ddl() {
  _has_bits_[0] |= 0x00000008u;
}
void FrenetFramePoint::clear_has_ddl() {
  _has_bits_[0] &= ~0x00000008u;
}
void FrenetFramePoint::clear_ddl() {
  ddl_ = 0;
  clear_has_ddl();
}
double FrenetFramePoint::ddl() const {
  // @@protoc_insertion_point(field_get:apollo.common.FrenetFramePoint.ddl)
  return ddl_;
}
void FrenetFramePoint::set_ddl(double value) {
  set_has_ddl();
  ddl_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.FrenetFramePoint.ddl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPoint::kSFieldNumber;
const int SpeedPoint::kTFieldNumber;
const int SpeedPoint::kVFieldNumber;
const int SpeedPoint::kAFieldNumber;
const int SpeedPoint::kDaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPoint::SpeedPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.SpeedPoint)
}
SpeedPoint::SpeedPoint(const SpeedPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&da_) -
    reinterpret_cast<char*>(&s_) + sizeof(da_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.SpeedPoint)
}

void SpeedPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&da_) -
    reinterpret_cast<char*>(&s_) + sizeof(da_));
}

SpeedPoint::~SpeedPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.SpeedPoint)
  SharedDtor();
}

void SpeedPoint::SharedDtor() {
}

void SpeedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedPoint::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPoint& SpeedPoint::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpeedPoint* SpeedPoint::New(::google::protobuf::Arena* arena) const {
  SpeedPoint* n = new SpeedPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.SpeedPoint)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&da_) -
      reinterpret_cast<char*>(&s_) + sizeof(da_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.SpeedPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double da = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_da();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.SpeedPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.SpeedPoint)
  return false;
#undef DO_
}

void SpeedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.SpeedPoint)
}

::google::protobuf::uint8* SpeedPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.SpeedPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.SpeedPoint)
  return target;
}

size_t SpeedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.SpeedPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.SpeedPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.SpeedPoint)
    MergeFrom(*source);
  }
}

void SpeedPoint::MergeFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.SpeedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      da_ = from.da_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPoint::CopyFrom(const SpeedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.SpeedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPoint::IsInitialized() const {
  return true;
}

void SpeedPoint::Swap(SpeedPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPoint::InternalSwap(SpeedPoint* other) {
  std::swap(s_, other->s_);
  std::swap(t_, other->t_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(da_, other->da_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeedPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedPoint

// optional double s = 1;
bool SpeedPoint::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpeedPoint::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void SpeedPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpeedPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double SpeedPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.s)
  return s_;
}
void SpeedPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.s)
}

// optional double t = 2;
bool SpeedPoint::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpeedPoint::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void SpeedPoint::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpeedPoint::clear_t() {
  t_ = 0;
  clear_has_t();
}
double SpeedPoint::t() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.t)
  return t_;
}
void SpeedPoint::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.t)
}

// optional double v = 3;
bool SpeedPoint::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpeedPoint::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void SpeedPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpeedPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
double SpeedPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.v)
  return v_;
}
void SpeedPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.v)
}

// optional double a = 4;
bool SpeedPoint::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SpeedPoint::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void SpeedPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void SpeedPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
double SpeedPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.a)
  return a_;
}
void SpeedPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.a)
}

// optional double da = 5;
bool SpeedPoint::has_da() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SpeedPoint::set_has_da() {
  _has_bits_[0] |= 0x00000010u;
}
void SpeedPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000010u;
}
void SpeedPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
double SpeedPoint::da() const {
  // @@protoc_insertion_point(field_get:apollo.common.SpeedPoint.da)
  return da_;
}
void SpeedPoint::set_da(double value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.SpeedPoint.da)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPoint::kXFieldNumber;
const int PathPoint::kYFieldNumber;
const int PathPoint::kZFieldNumber;
const int PathPoint::kThetaFieldNumber;
const int PathPoint::kKappaFieldNumber;
const int PathPoint::kSFieldNumber;
const int PathPoint::kDkappaFieldNumber;
const int PathPoint::kDdkappaFieldNumber;
const int PathPoint::kLaneIdFieldNumber;
const int PathPoint::kXDerivativeFieldNumber;
const int PathPoint::kYDerivativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPoint::PathPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.PathPoint)
}
PathPoint::PathPoint(const PathPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_derivative_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_derivative_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.PathPoint)
}

void PathPoint::SharedCtor() {
  _cached_size_ = 0;
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_derivative_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_derivative_));
}

PathPoint::~PathPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.PathPoint)
  SharedDtor();
}

void PathPoint::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PathPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathPoint::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPoint& PathPoint::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

PathPoint* PathPoint::New(::google::protobuf::Arena* arena) const {
  PathPoint* n = new PathPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.PathPoint)
  if (has_lane_id()) {
    GOOGLE_DCHECK(!lane_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*lane_id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&dkappa_) -
      reinterpret_cast<char*>(&x_) + sizeof(dkappa_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&ddkappa_, 0, reinterpret_cast<char*>(&y_derivative_) -
      reinterpret_cast<char*>(&ddkappa_) + sizeof(y_derivative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.PathPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dkappa = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_dkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddkappa = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_ddkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), this->lane_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.PathPoint.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_derivative = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_x_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_derivative = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_y_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.PathPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.PathPoint)
  return false;
#undef DO_
}

void PathPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double kappa = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->kappa(), output);
  }

  // optional double s = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->s(), output);
  }

  // optional double dkappa = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dkappa(), output);
  }

  // optional double ddkappa = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ddkappa(), output);
  }

  // optional string lane_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->lane_id(), output);
  }

  // optional double x_derivative = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->x_derivative(), output);
  }

  // optional double y_derivative = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->y_derivative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.PathPoint)
}

::google::protobuf::uint8* PathPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.PathPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double kappa = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->kappa(), target);
  }

  // optional double s = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->s(), target);
  }

  // optional double dkappa = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dkappa(), target);
  }

  // optional double ddkappa = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ddkappa(), target);
  }

  // optional string lane_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), this->lane_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.PathPoint.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lane_id(), target);
  }

  // optional double x_derivative = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->x_derivative(), target);
  }

  // optional double y_derivative = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->y_derivative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.PathPoint)
  return target;
}

size_t PathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.PathPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string lane_id = 9;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 5;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional double s = 6;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double dkappa = 7;
    if (has_dkappa()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double ddkappa = 8;
    if (has_ddkappa()) {
      total_size += 1 + 8;
    }

    // optional double x_derivative = 10;
    if (has_x_derivative()) {
      total_size += 1 + 8;
    }

    // optional double y_derivative = 11;
    if (has_y_derivative()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.PathPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.PathPoint)
    MergeFrom(*source);
  }
}

void PathPoint::MergeFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.PathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000080u) {
      dkappa_ = from.dkappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      ddkappa_ = from.ddkappa_;
    }
    if (cached_has_bits & 0x00000200u) {
      x_derivative_ = from.x_derivative_;
    }
    if (cached_has_bits & 0x00000400u) {
      y_derivative_ = from.y_derivative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPoint::CopyFrom(const PathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.PathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPoint::IsInitialized() const {
  return true;
}

void PathPoint::Swap(PathPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPoint::InternalSwap(PathPoint* other) {
  lane_id_.Swap(&other->lane_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(theta_, other->theta_);
  std::swap(kappa_, other->kappa_);
  std::swap(s_, other->s_);
  std::swap(dkappa_, other->dkappa_);
  std::swap(ddkappa_, other->ddkappa_);
  std::swap(x_derivative_, other->x_derivative_);
  std::swap(y_derivative_, other->y_derivative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathPoint

// optional double x = 1;
bool PathPoint::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathPoint::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void PathPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
double PathPoint::x() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x)
  return x_;
}
void PathPoint::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x)
}

// optional double y = 2;
bool PathPoint::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathPoint::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void PathPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
double PathPoint::y() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y)
  return y_;
}
void PathPoint::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y)
}

// optional double z = 3;
bool PathPoint::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PathPoint::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
void PathPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void PathPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
double PathPoint::z() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.z)
  return z_;
}
void PathPoint::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.z)
}

// optional double theta = 4;
bool PathPoint::has_theta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PathPoint::set_has_theta() {
  _has_bits_[0] |= 0x00000010u;
}
void PathPoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000010u;
}
void PathPoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PathPoint::theta() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.theta)
  return theta_;
}
void PathPoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.theta)
}

// optional double kappa = 5;
bool PathPoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PathPoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
void PathPoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
void PathPoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
double PathPoint::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.kappa)
  return kappa_;
}
void PathPoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.kappa)
}

// optional double s = 6;
bool PathPoint::has_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PathPoint::set_has_s() {
  _has_bits_[0] |= 0x00000040u;
}
void PathPoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000040u;
}
void PathPoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
double PathPoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.s)
  return s_;
}
void PathPoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.s)
}

// optional double dkappa = 7;
bool PathPoint::has_dkappa() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PathPoint::set_has_dkappa() {
  _has_bits_[0] |= 0x00000080u;
}
void PathPoint::clear_has_dkappa() {
  _has_bits_[0] &= ~0x00000080u;
}
void PathPoint::clear_dkappa() {
  dkappa_ = 0;
  clear_has_dkappa();
}
double PathPoint::dkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.dkappa)
  return dkappa_;
}
void PathPoint::set_dkappa(double value) {
  set_has_dkappa();
  dkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.dkappa)
}

// optional double ddkappa = 8;
bool PathPoint::has_ddkappa() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PathPoint::set_has_ddkappa() {
  _has_bits_[0] |= 0x00000100u;
}
void PathPoint::clear_has_ddkappa() {
  _has_bits_[0] &= ~0x00000100u;
}
void PathPoint::clear_ddkappa() {
  ddkappa_ = 0;
  clear_has_ddkappa();
}
double PathPoint::ddkappa() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.ddkappa)
  return ddkappa_;
}
void PathPoint::set_ddkappa(double value) {
  set_has_ddkappa();
  ddkappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.ddkappa)
}

// optional string lane_id = 9;
bool PathPoint::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathPoint::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PathPoint::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathPoint::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
const ::std::string& PathPoint::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.lane_id)
  return lane_id_.GetNoArena();
}
void PathPoint::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.lane_id)
}
#if LANG_CXX11
void PathPoint::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.PathPoint.lane_id)
}
#endif
void PathPoint::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.PathPoint.lane_id)
}
void PathPoint::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.PathPoint.lane_id)
}
::std::string* PathPoint::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.common.PathPoint.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PathPoint::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.common.PathPoint.lane_id)
  clear_has_lane_id();
  return lane_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PathPoint::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.PathPoint.lane_id)
}

// optional double x_derivative = 10;
bool PathPoint::has_x_derivative() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PathPoint::set_has_x_derivative() {
  _has_bits_[0] |= 0x00000200u;
}
void PathPoint::clear_has_x_derivative() {
  _has_bits_[0] &= ~0x00000200u;
}
void PathPoint::clear_x_derivative() {
  x_derivative_ = 0;
  clear_has_x_derivative();
}
double PathPoint::x_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.x_derivative)
  return x_derivative_;
}
void PathPoint::set_x_derivative(double value) {
  set_has_x_derivative();
  x_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.x_derivative)
}

// optional double y_derivative = 11;
bool PathPoint::has_y_derivative() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PathPoint::set_has_y_derivative() {
  _has_bits_[0] |= 0x00000400u;
}
void PathPoint::clear_has_y_derivative() {
  _has_bits_[0] &= ~0x00000400u;
}
void PathPoint::clear_y_derivative() {
  y_derivative_ = 0;
  clear_has_y_derivative();
}
double PathPoint::y_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.common.PathPoint.y_derivative)
  return y_derivative_;
}
void PathPoint::set_y_derivative(double value) {
  set_has_y_derivative();
  y_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.PathPoint.y_derivative)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNameFieldNumber;
const int Path::kPathPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Path)
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:apollo.common.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Path& Path::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Path)
  path_point_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.Path.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.Path.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.Path.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 2;
  for (unsigned int i = 0, n = this->path_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->path_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Path)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.PathPoint path_point = 2;
  {
    unsigned int count = this->path_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_point(i));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  path_point_.MergeFrom(from.path_point_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  path_point_.InternalSwap(&other->path_point_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// optional string name = 1;
bool Path::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Path::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Path::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Path::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.Path.name)
  return name_.GetNoArena();
}
void Path::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Path.name)
}
#if LANG_CXX11
void Path::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Path.name)
}
#endif
void Path::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Path.name)
}
void Path::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Path.name)
}
::std::string* Path::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.Path.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.Path.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Path::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Path.name)
}

// repeated .apollo.common.PathPoint path_point = 2;
int Path::path_point_size() const {
  return path_point_.size();
}
void Path::clear_path_point() {
  path_point_.Clear();
}
const ::apollo::common::PathPoint& Path::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Path.path_point)
  return path_point_.Get(index);
}
::apollo::common::PathPoint* Path::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Path.path_point)
  return path_point_.Mutable(index);
}
::apollo::common::PathPoint* Path::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Path.path_point)
  return path_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
Path::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Path.path_point)
  return &path_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
Path::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Path.path_point)
  return path_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPoint::kPathPointFieldNumber;
const int TrajectoryPoint::kVFieldNumber;
const int TrajectoryPoint::kAFieldNumber;
const int TrajectoryPoint::kRelativeTimeFieldNumber;
const int TrajectoryPoint::kDaFieldNumber;
const int TrajectoryPoint::kSteerFieldNumber;
const int TrajectoryPoint::kGaussianInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPoint::TrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_point()) {
    path_point_ = new ::apollo::common::PathPoint(*from.path_point_);
  } else {
    path_point_ = NULL;
  }
  if (from.has_gaussian_info()) {
    gaussian_info_ = new ::apollo::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = NULL;
  }
  ::memcpy(&v_, &from.v_,
    reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&v_) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_point_, 0, reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&path_point_) + sizeof(steer_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.TrajectoryPoint)
  SharedDtor();
}

void TrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete path_point_;
  }
  if (this != internal_default_instance()) {
    delete gaussian_info_;
  }
}

void TrajectoryPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryPoint::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPoint& TrajectoryPoint::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryPoint* TrajectoryPoint::New(::google::protobuf::Arena* arena) const {
  TrajectoryPoint* n = new TrajectoryPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.TrajectoryPoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_path_point()) {
      GOOGLE_DCHECK(path_point_ != NULL);
      path_point_->::apollo::common::PathPoint::Clear();
    }
    if (has_gaussian_info()) {
      GOOGLE_DCHECK(gaussian_info_ != NULL);
      gaussian_info_->::apollo::common::GaussianInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&v_, 0, reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&v_) + sizeof(steer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.TrajectoryPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PathPoint path_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_relative_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double da = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_da();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &da_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.GaussianInfo gaussian_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gaussian_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.TrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.TrajectoryPoint)
  return false;
#undef DO_
}

void TrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_point_, output);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->da(), output);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steer(), output);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->gaussian_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.TrajectoryPoint)
}

::google::protobuf::uint8* TrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.TrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_point_, deterministic, target);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  // optional double da = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->da(), target);
  }

  // optional double steer = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steer(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->gaussian_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.TrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.common.PathPoint path_point = 1;
    if (has_path_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_point_);
    }

    // optional .apollo.common.GaussianInfo gaussian_info = 7;
    if (has_gaussian_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gaussian_info_);
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

    // optional double da = 5;
    if (has_da()) {
      total_size += 1 + 8;
    }

    // optional double steer = 6;
    if (has_steer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.TrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_point()->::apollo::common::PathPoint::MergeFrom(from.path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from.gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_time_ = from.relative_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      da_ = from.da_;
    }
    if (cached_has_bits & 0x00000040u) {
      steer_ = from.steer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::Swap(TrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  std::swap(path_point_, other->path_point_);
  std::swap(gaussian_info_, other->gaussian_info_);
  std::swap(v_, other->v_);
  std::swap(a_, other->a_);
  std::swap(relative_time_, other->relative_time_);
  std::swap(da_, other->da_);
  std::swap(steer_, other->steer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryPoint

// optional .apollo.common.PathPoint path_point = 1;
bool TrajectoryPoint::has_path_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrajectoryPoint::set_has_path_point() {
  _has_bits_[0] |= 0x00000001u;
}
void TrajectoryPoint::clear_has_path_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrajectoryPoint::clear_path_point() {
  if (path_point_ != NULL) path_point_->::apollo::common::PathPoint::Clear();
  clear_has_path_point();
}
const ::apollo::common::PathPoint& TrajectoryPoint::path_point() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.path_point)
  return path_point_ != NULL ? *path_point_
                         : *::apollo::common::PathPoint::internal_default_instance();
}
::apollo::common::PathPoint* TrajectoryPoint::mutable_path_point() {
  set_has_path_point();
  if (path_point_ == NULL) {
    path_point_ = new ::apollo::common::PathPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.TrajectoryPoint.path_point)
  return path_point_;
}
::apollo::common::PathPoint* TrajectoryPoint::release_path_point() {
  // @@protoc_insertion_point(field_release:apollo.common.TrajectoryPoint.path_point)
  clear_has_path_point();
  ::apollo::common::PathPoint* temp = path_point_;
  path_point_ = NULL;
  return temp;
}
void TrajectoryPoint::set_allocated_path_point(::apollo::common::PathPoint* path_point) {
  delete path_point_;
  path_point_ = path_point;
  if (path_point) {
    set_has_path_point();
  } else {
    clear_has_path_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.TrajectoryPoint.path_point)
}

// optional double v = 2;
bool TrajectoryPoint::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrajectoryPoint::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
void TrajectoryPoint::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrajectoryPoint::clear_v() {
  v_ = 0;
  clear_has_v();
}
double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.v)
  return v_;
}
void TrajectoryPoint::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.v)
}

// optional double a = 3;
bool TrajectoryPoint::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrajectoryPoint::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
void TrajectoryPoint::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrajectoryPoint::clear_a() {
  a_ = 0;
  clear_has_a();
}
double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.a)
  return a_;
}
void TrajectoryPoint::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.a)
}

// optional double relative_time = 4;
bool TrajectoryPoint::has_relative_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrajectoryPoint::set_has_relative_time() {
  _has_bits_[0] |= 0x00000010u;
}
void TrajectoryPoint::clear_has_relative_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrajectoryPoint::clear_relative_time() {
  relative_time_ = 0;
  clear_has_relative_time();
}
double TrajectoryPoint::relative_time() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.relative_time)
  return relative_time_;
}
void TrajectoryPoint::set_relative_time(double value) {
  set_has_relative_time();
  relative_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.relative_time)
}

// optional double da = 5;
bool TrajectoryPoint::has_da() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrajectoryPoint::set_has_da() {
  _has_bits_[0] |= 0x00000020u;
}
void TrajectoryPoint::clear_has_da() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrajectoryPoint::clear_da() {
  da_ = 0;
  clear_has_da();
}
double TrajectoryPoint::da() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.da)
  return da_;
}
void TrajectoryPoint::set_da(double value) {
  set_has_da();
  da_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.da)
}

// optional double steer = 6;
bool TrajectoryPoint::has_steer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrajectoryPoint::set_has_steer() {
  _has_bits_[0] |= 0x00000040u;
}
void TrajectoryPoint::clear_has_steer() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrajectoryPoint::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
double TrajectoryPoint::steer() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.steer)
  return steer_;
}
void TrajectoryPoint::set_steer(double value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.TrajectoryPoint.steer)
}

// optional .apollo.common.GaussianInfo gaussian_info = 7;
bool TrajectoryPoint::has_gaussian_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrajectoryPoint::set_has_gaussian_info() {
  _has_bits_[0] |= 0x00000002u;
}
void TrajectoryPoint::clear_has_gaussian_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrajectoryPoint::clear_gaussian_info() {
  if (gaussian_info_ != NULL) gaussian_info_->::apollo::common::GaussianInfo::Clear();
  clear_has_gaussian_info();
}
const ::apollo::common::GaussianInfo& TrajectoryPoint::gaussian_info() const {
  // @@protoc_insertion_point(field_get:apollo.common.TrajectoryPoint.gaussian_info)
  return gaussian_info_ != NULL ? *gaussian_info_
                         : *::apollo::common::GaussianInfo::internal_default_instance();
}
::apollo::common::GaussianInfo* TrajectoryPoint::mutable_gaussian_info() {
  set_has_gaussian_info();
  if (gaussian_info_ == NULL) {
    gaussian_info_ = new ::apollo::common::GaussianInfo;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.TrajectoryPoint.gaussian_info)
  return gaussian_info_;
}
::apollo::common::GaussianInfo* TrajectoryPoint::release_gaussian_info() {
  // @@protoc_insertion_point(field_release:apollo.common.TrajectoryPoint.gaussian_info)
  clear_has_gaussian_info();
  ::apollo::common::GaussianInfo* temp = gaussian_info_;
  gaussian_info_ = NULL;
  return temp;
}
void TrajectoryPoint::set_allocated_gaussian_info(::apollo::common::GaussianInfo* gaussian_info) {
  delete gaussian_info_;
  gaussian_info_ = gaussian_info;
  if (gaussian_info) {
    set_has_gaussian_info();
  } else {
    clear_has_gaussian_info();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.TrajectoryPoint.gaussian_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kNameFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.common.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.Trajectory)
  trajectory_point_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.Trajectory.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.Trajectory.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.Trajectory.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = this->trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(i));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional string name = 1;
bool Trajectory::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trajectory::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Trajectory::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Trajectory::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.Trajectory.name)
  return name_.GetNoArena();
}
void Trajectory::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.Trajectory.name)
}
#if LANG_CXX11
void Trajectory::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.Trajectory.name)
}
#endif
void Trajectory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.Trajectory.name)
}
void Trajectory::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.Trajectory.name)
}
::std::string* Trajectory::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.Trajectory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Trajectory::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.Trajectory.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Trajectory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.Trajectory.name)
}

// repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
int Trajectory::trajectory_point_size() const {
  return trajectory_point_.size();
}
void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::apollo::common::TrajectoryPoint& Trajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_.Get(index);
}
::apollo::common::TrajectoryPoint* Trajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::apollo::common::TrajectoryPoint* Trajectory::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >*
Trajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.Trajectory.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::TrajectoryPoint >&
Trajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.Trajectory.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMotionPoint::kTrajectoryPointFieldNumber;
const int VehicleMotionPoint::kSteerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMotionPoint::VehicleMotionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleMotionPoint)
}
VehicleMotionPoint::VehicleMotionPoint(const VehicleMotionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_point()) {
    trajectory_point_ = new ::apollo::common::TrajectoryPoint(*from.trajectory_point_);
  } else {
    trajectory_point_ = NULL;
  }
  steer_ = from.steer_;
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleMotionPoint)
}

void VehicleMotionPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trajectory_point_, 0, reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&trajectory_point_) + sizeof(steer_));
}

VehicleMotionPoint::~VehicleMotionPoint() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleMotionPoint)
  SharedDtor();
}

void VehicleMotionPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete trajectory_point_;
  }
}

void VehicleMotionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMotionPoint::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleMotionPoint& VehicleMotionPoint::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleMotionPoint* VehicleMotionPoint::New(::google::protobuf::Arena* arena) const {
  VehicleMotionPoint* n = new VehicleMotionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMotionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleMotionPoint)
  if (has_trajectory_point()) {
    GOOGLE_DCHECK(trajectory_point_ != NULL);
    trajectory_point_->::apollo::common::TrajectoryPoint::Clear();
  }
  steer_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleMotionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleMotionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleMotionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleMotionPoint)
  return false;
#undef DO_
}

void VehicleMotionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleMotionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trajectory_point_, output);
  }

  // optional double steer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleMotionPoint)
}

::google::protobuf::uint8* VehicleMotionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleMotionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trajectory_point_, deterministic, target);
  }

  // optional double steer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleMotionPoint)
  return target;
}

size_t VehicleMotionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleMotionPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.TrajectoryPoint trajectory_point = 1;
    if (has_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_point_);
    }

    // optional double steer = 2;
    if (has_steer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMotionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMotionPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMotionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleMotionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleMotionPoint)
    MergeFrom(*source);
  }
}

void VehicleMotionPoint::MergeFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleMotionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory_point()->::apollo::common::TrajectoryPoint::MergeFrom(from.trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      steer_ = from.steer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleMotionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotionPoint::CopyFrom(const VehicleMotionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleMotionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotionPoint::IsInitialized() const {
  return true;
}

void VehicleMotionPoint::Swap(VehicleMotionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMotionPoint::InternalSwap(VehicleMotionPoint* other) {
  std::swap(trajectory_point_, other->trajectory_point_);
  std::swap(steer_, other->steer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMotionPoint::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMotionPoint

// optional .apollo.common.TrajectoryPoint trajectory_point = 1;
bool VehicleMotionPoint::has_trajectory_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleMotionPoint::set_has_trajectory_point() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleMotionPoint::clear_has_trajectory_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleMotionPoint::clear_trajectory_point() {
  if (trajectory_point_ != NULL) trajectory_point_->::apollo::common::TrajectoryPoint::Clear();
  clear_has_trajectory_point();
}
const ::apollo::common::TrajectoryPoint& VehicleMotionPoint::trajectory_point() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotionPoint.trajectory_point)
  return trajectory_point_ != NULL ? *trajectory_point_
                         : *::apollo::common::TrajectoryPoint::internal_default_instance();
}
::apollo::common::TrajectoryPoint* VehicleMotionPoint::mutable_trajectory_point() {
  set_has_trajectory_point();
  if (trajectory_point_ == NULL) {
    trajectory_point_ = new ::apollo::common::TrajectoryPoint;
  }
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleMotionPoint.trajectory_point)
  return trajectory_point_;
}
::apollo::common::TrajectoryPoint* VehicleMotionPoint::release_trajectory_point() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleMotionPoint.trajectory_point)
  clear_has_trajectory_point();
  ::apollo::common::TrajectoryPoint* temp = trajectory_point_;
  trajectory_point_ = NULL;
  return temp;
}
void VehicleMotionPoint::set_allocated_trajectory_point(::apollo::common::TrajectoryPoint* trajectory_point) {
  delete trajectory_point_;
  trajectory_point_ = trajectory_point;
  if (trajectory_point) {
    set_has_trajectory_point();
  } else {
    clear_has_trajectory_point();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleMotionPoint.trajectory_point)
}

// optional double steer = 2;
bool VehicleMotionPoint::has_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleMotionPoint::set_has_steer() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleMotionPoint::clear_has_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleMotionPoint::clear_steer() {
  steer_ = 0;
  clear_has_steer();
}
double VehicleMotionPoint::steer() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotionPoint.steer)
  return steer_;
}
void VehicleMotionPoint::set_steer(double value) {
  set_has_steer();
  steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.VehicleMotionPoint.steer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleMotion::kNameFieldNumber;
const int VehicleMotion::kVehicleMotionPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleMotion::VehicleMotion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.VehicleMotion)
}
VehicleMotion::VehicleMotion(const VehicleMotion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vehicle_motion_point_(from.vehicle_motion_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.common.VehicleMotion)
}

void VehicleMotion::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleMotion::~VehicleMotion() {
  // @@protoc_insertion_point(destructor:apollo.common.VehicleMotion)
  SharedDtor();
}

void VehicleMotion::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleMotion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VehicleMotion::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleMotion& VehicleMotion::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleMotion* VehicleMotion::New(::google::protobuf::Arena* arena) const {
  VehicleMotion* n = new VehicleMotion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.VehicleMotion)
  vehicle_motion_point_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleMotion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.VehicleMotion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.common.VehicleMotion.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vehicle_motion_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.VehicleMotion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.VehicleMotion)
  return false;
#undef DO_
}

void VehicleMotion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.VehicleMotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleMotion.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  for (unsigned int i = 0, n = this->vehicle_motion_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vehicle_motion_point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.VehicleMotion)
}

::google::protobuf::uint8* VehicleMotion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.VehicleMotion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.common.VehicleMotion.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  for (unsigned int i = 0, n = this->vehicle_motion_point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->vehicle_motion_point(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.VehicleMotion)
  return target;
}

size_t VehicleMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.VehicleMotion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
  {
    unsigned int count = this->vehicle_motion_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicle_motion_point(i));
    }
  }

  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleMotion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleMotion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleMotion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.VehicleMotion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.VehicleMotion)
    MergeFrom(*source);
  }
}

void VehicleMotion::MergeFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.VehicleMotion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_motion_point_.MergeFrom(from.vehicle_motion_point_);
  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void VehicleMotion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleMotion::CopyFrom(const VehicleMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.VehicleMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleMotion::IsInitialized() const {
  return true;
}

void VehicleMotion::Swap(VehicleMotion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleMotion::InternalSwap(VehicleMotion* other) {
  vehicle_motion_point_.InternalSwap(&other->vehicle_motion_point_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VehicleMotion::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleMotion

// optional string name = 1;
bool VehicleMotion::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleMotion::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleMotion::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleMotion::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& VehicleMotion::name() const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotion.name)
  return name_.GetNoArena();
}
void VehicleMotion::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.common.VehicleMotion.name)
}
#if LANG_CXX11
void VehicleMotion::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.common.VehicleMotion.name)
}
#endif
void VehicleMotion::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.common.VehicleMotion.name)
}
void VehicleMotion::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.common.VehicleMotion.name)
}
::std::string* VehicleMotion::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleMotion.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VehicleMotion::release_name() {
  // @@protoc_insertion_point(field_release:apollo.common.VehicleMotion.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VehicleMotion::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.common.VehicleMotion.name)
}

// repeated .apollo.common.VehicleMotionPoint vehicle_motion_point = 2;
int VehicleMotion::vehicle_motion_point_size() const {
  return vehicle_motion_point_.size();
}
void VehicleMotion::clear_vehicle_motion_point() {
  vehicle_motion_point_.Clear();
}
const ::apollo::common::VehicleMotionPoint& VehicleMotion::vehicle_motion_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Get(index);
}
::apollo::common::VehicleMotionPoint* VehicleMotion::mutable_vehicle_motion_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Mutable(index);
}
::apollo::common::VehicleMotionPoint* VehicleMotion::add_vehicle_motion_point() {
  // @@protoc_insertion_point(field_add:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint >*
VehicleMotion::mutable_vehicle_motion_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.common.VehicleMotion.vehicle_motion_point)
  return &vehicle_motion_point_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::common::VehicleMotionPoint >&
VehicleMotion::vehicle_motion_point() const {
  // @@protoc_insertion_point(field_list:apollo.common.VehicleMotion.vehicle_motion_point)
  return vehicle_motion_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GaussianInfo::kSigmaXFieldNumber;
const int GaussianInfo::kSigmaYFieldNumber;
const int GaussianInfo::kCorrelationFieldNumber;
const int GaussianInfo::kAreaProbabilityFieldNumber;
const int GaussianInfo::kEllipseAFieldNumber;
const int GaussianInfo::kEllipseBFieldNumber;
const int GaussianInfo::kThetaAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GaussianInfo::GaussianInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pnc_5fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.common.GaussianInfo)
}
GaussianInfo::GaussianInfo(const GaussianInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sigma_x_, &from.sigma_x_,
    reinterpret_cast<char*>(&theta_a_) -
    reinterpret_cast<char*>(&sigma_x_) + sizeof(theta_a_));
  // @@protoc_insertion_point(copy_constructor:apollo.common.GaussianInfo)
}

void GaussianInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sigma_x_, 0, reinterpret_cast<char*>(&theta_a_) -
    reinterpret_cast<char*>(&sigma_x_) + sizeof(theta_a_));
}

GaussianInfo::~GaussianInfo() {
  // @@protoc_insertion_point(destructor:apollo.common.GaussianInfo)
  SharedDtor();
}

void GaussianInfo::SharedDtor() {
}

void GaussianInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaussianInfo::descriptor() {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GaussianInfo& GaussianInfo::default_instance() {
  protobuf_pnc_5fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

GaussianInfo* GaussianInfo::New(::google::protobuf::Arena* arena) const {
  GaussianInfo* n = new GaussianInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GaussianInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.common.GaussianInfo)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&sigma_x_, 0, reinterpret_cast<char*>(&theta_a_) -
      reinterpret_cast<char*>(&sigma_x_) + sizeof(theta_a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GaussianInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.common.GaussianInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double sigma_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_sigma_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sigma_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_sigma_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigma_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double correlation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_correlation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &correlation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double area_probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_area_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &area_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ellipse_a = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ellipse_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipse_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ellipse_b = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_ellipse_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipse_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta_a = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_theta_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.common.GaussianInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.common.GaussianInfo)
  return false;
#undef DO_
}

void GaussianInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.common.GaussianInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sigma_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sigma_x(), output);
  }

  // optional double sigma_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sigma_y(), output);
  }

  // optional double correlation = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->correlation(), output);
  }

  // optional double area_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->area_probability(), output);
  }

  // optional double ellipse_a = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ellipse_a(), output);
  }

  // optional double ellipse_b = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ellipse_b(), output);
  }

  // optional double theta_a = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->theta_a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.common.GaussianInfo)
}

::google::protobuf::uint8* GaussianInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.common.GaussianInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sigma_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sigma_x(), target);
  }

  // optional double sigma_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sigma_y(), target);
  }

  // optional double correlation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->correlation(), target);
  }

  // optional double area_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->area_probability(), target);
  }

  // optional double ellipse_a = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ellipse_a(), target);
  }

  // optional double ellipse_b = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ellipse_b(), target);
  }

  // optional double theta_a = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->theta_a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.common.GaussianInfo)
  return target;
}

size_t GaussianInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.common.GaussianInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double sigma_x = 1;
    if (has_sigma_x()) {
      total_size += 1 + 8;
    }

    // optional double sigma_y = 2;
    if (has_sigma_y()) {
      total_size += 1 + 8;
    }

    // optional double correlation = 3;
    if (has_correlation()) {
      total_size += 1 + 8;
    }

    // optional double area_probability = 4;
    if (has_area_probability()) {
      total_size += 1 + 8;
    }

    // optional double ellipse_a = 5;
    if (has_ellipse_a()) {
      total_size += 1 + 8;
    }

    // optional double ellipse_b = 6;
    if (has_ellipse_b()) {
      total_size += 1 + 8;
    }

    // optional double theta_a = 7;
    if (has_theta_a()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaussianInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GaussianInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GaussianInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.common.GaussianInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.common.GaussianInfo)
    MergeFrom(*source);
  }
}

void GaussianInfo::MergeFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.common.GaussianInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      sigma_x_ = from.sigma_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      sigma_y_ = from.sigma_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      correlation_ = from.correlation_;
    }
    if (cached_has_bits & 0x00000008u) {
      area_probability_ = from.area_probability_;
    }
    if (cached_has_bits & 0x00000010u) {
      ellipse_a_ = from.ellipse_a_;
    }
    if (cached_has_bits & 0x00000020u) {
      ellipse_b_ = from.ellipse_b_;
    }
    if (cached_has_bits & 0x00000040u) {
      theta_a_ = from.theta_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaussianInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaussianInfo::CopyFrom(const GaussianInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.common.GaussianInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaussianInfo::IsInitialized() const {
  return true;
}

void GaussianInfo::Swap(GaussianInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GaussianInfo::InternalSwap(GaussianInfo* other) {
  std::swap(sigma_x_, other->sigma_x_);
  std::swap(sigma_y_, other->sigma_y_);
  std::swap(correlation_, other->correlation_);
  std::swap(area_probability_, other->area_probability_);
  std::swap(ellipse_a_, other->ellipse_a_);
  std::swap(ellipse_b_, other->ellipse_b_);
  std::swap(theta_a_, other->theta_a_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GaussianInfo::GetMetadata() const {
  protobuf_pnc_5fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pnc_5fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GaussianInfo

// optional double sigma_x = 1;
bool GaussianInfo::has_sigma_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GaussianInfo::set_has_sigma_x() {
  _has_bits_[0] |= 0x00000001u;
}
void GaussianInfo::clear_has_sigma_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void GaussianInfo::clear_sigma_x() {
  sigma_x_ = 0;
  clear_has_sigma_x();
}
double GaussianInfo::sigma_x() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.sigma_x)
  return sigma_x_;
}
void GaussianInfo::set_sigma_x(double value) {
  set_has_sigma_x();
  sigma_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.sigma_x)
}

// optional double sigma_y = 2;
bool GaussianInfo::has_sigma_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GaussianInfo::set_has_sigma_y() {
  _has_bits_[0] |= 0x00000002u;
}
void GaussianInfo::clear_has_sigma_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void GaussianInfo::clear_sigma_y() {
  sigma_y_ = 0;
  clear_has_sigma_y();
}
double GaussianInfo::sigma_y() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.sigma_y)
  return sigma_y_;
}
void GaussianInfo::set_sigma_y(double value) {
  set_has_sigma_y();
  sigma_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.sigma_y)
}

// optional double correlation = 3;
bool GaussianInfo::has_correlation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GaussianInfo::set_has_correlation() {
  _has_bits_[0] |= 0x00000004u;
}
void GaussianInfo::clear_has_correlation() {
  _has_bits_[0] &= ~0x00000004u;
}
void GaussianInfo::clear_correlation() {
  correlation_ = 0;
  clear_has_correlation();
}
double GaussianInfo::correlation() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.correlation)
  return correlation_;
}
void GaussianInfo::set_correlation(double value) {
  set_has_correlation();
  correlation_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.correlation)
}

// optional double area_probability = 4;
bool GaussianInfo::has_area_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GaussianInfo::set_has_area_probability() {
  _has_bits_[0] |= 0x00000008u;
}
void GaussianInfo::clear_has_area_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
void GaussianInfo::clear_area_probability() {
  area_probability_ = 0;
  clear_has_area_probability();
}
double GaussianInfo::area_probability() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.area_probability)
  return area_probability_;
}
void GaussianInfo::set_area_probability(double value) {
  set_has_area_probability();
  area_probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.area_probability)
}

// optional double ellipse_a = 5;
bool GaussianInfo::has_ellipse_a() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GaussianInfo::set_has_ellipse_a() {
  _has_bits_[0] |= 0x00000010u;
}
void GaussianInfo::clear_has_ellipse_a() {
  _has_bits_[0] &= ~0x00000010u;
}
void GaussianInfo::clear_ellipse_a() {
  ellipse_a_ = 0;
  clear_has_ellipse_a();
}
double GaussianInfo::ellipse_a() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.ellipse_a)
  return ellipse_a_;
}
void GaussianInfo::set_ellipse_a(double value) {
  set_has_ellipse_a();
  ellipse_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.ellipse_a)
}

// optional double ellipse_b = 6;
bool GaussianInfo::has_ellipse_b() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GaussianInfo::set_has_ellipse_b() {
  _has_bits_[0] |= 0x00000020u;
}
void GaussianInfo::clear_has_ellipse_b() {
  _has_bits_[0] &= ~0x00000020u;
}
void GaussianInfo::clear_ellipse_b() {
  ellipse_b_ = 0;
  clear_has_ellipse_b();
}
double GaussianInfo::ellipse_b() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.ellipse_b)
  return ellipse_b_;
}
void GaussianInfo::set_ellipse_b(double value) {
  set_has_ellipse_b();
  ellipse_b_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.ellipse_b)
}

// optional double theta_a = 7;
bool GaussianInfo::has_theta_a() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GaussianInfo::set_has_theta_a() {
  _has_bits_[0] |= 0x00000040u;
}
void GaussianInfo::clear_has_theta_a() {
  _has_bits_[0] &= ~0x00000040u;
}
void GaussianInfo::clear_theta_a() {
  theta_a_ = 0;
  clear_has_theta_a();
}
double GaussianInfo::theta_a() const {
  // @@protoc_insertion_point(field_get:apollo.common.GaussianInfo.theta_a)
  return theta_a_;
}
void GaussianInfo::set_theta_a(double value) {
  set_has_theta_a();
  theta_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.common.GaussianInfo.theta_a)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
