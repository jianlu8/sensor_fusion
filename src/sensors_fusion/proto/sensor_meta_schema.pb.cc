// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_meta_schema.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor_meta_schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
class SensorMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SensorMeta> {
} _SensorMeta_default_instance_;
class MultiSensorMetaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiSensorMeta> {
} _MultiSensorMeta_default_instance_;

namespace protobuf_sensor_5fmeta_5fschema_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeta, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeta, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorMeta, orientation_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiSensorMeta, sensor_meta_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(SensorMeta)},
  { 11, 17, sizeof(MultiSensorMeta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiSensorMeta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor_meta_schema.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _SensorMeta_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MultiSensorMeta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SensorMeta_default_instance_.DefaultConstruct();
  _MultiSensorMeta_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030sensor_meta_schema.proto\022\021apollo.perce"
      "ption\"\255\004\n\nSensorMeta\022\014\n\004name\030\001 \001(\t\0226\n\004ty"
      "pe\030\002 \001(\0162(.apollo.perception.SensorMeta."
      "SensorType\022D\n\013orientation\030\003 \001(\0162/.apollo"
      ".perception.SensorMeta.SensorOrientation"
      "\"\367\001\n\nSensorType\022 \n\023UNKNOWN_SENSOR_TYPE\020\377"
      "\377\377\377\377\377\377\377\377\001\022\017\n\013VELODYNE_64\020\000\022\017\n\013VELODYNE_3"
      "2\020\001\022\017\n\013VELODYNE_16\020\002\022\r\n\tLDLIDAR_4\020\003\022\r\n\tL"
      "DLIDAR_1\020\004\022\025\n\021SHORT_RANGE_RADAR\020\005\022\024\n\020LON"
      "G_RANGE_RADAR\020\006\022\024\n\020MONOCULAR_CAMERA\020\007\022\021\n"
      "\rSTEREO_CAMERA\020\010\022\016\n\nULTRASONIC\020\t\022\020\n\014VELO"
      "DYNE_128\020\n\"\230\001\n\021SensorOrientation\022\t\n\005FRON"
      "T\020\000\022\020\n\014LEFT_FORWARD\020\001\022\010\n\004LEFT\020\002\022\021\n\rLEFT_"
      "BACKWARD\020\003\022\010\n\004REAR\020\004\022\022\n\016RIGHT_BACKWARD\020\005"
      "\022\t\n\005RIGHT\020\006\022\021\n\rRIGHT_FORWARD\020\007\022\r\n\tPANORA"
      "MIC\020\010\"E\n\017MultiSensorMeta\0222\n\013sensor_meta\030"
      "\001 \003(\0132\035.apollo.perception.SensorMeta"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 676);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor_meta_schema.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sensor_5fmeta_5fschema_2eproto

const ::google::protobuf::EnumDescriptor* SensorMeta_SensorType_descriptor() {
  protobuf_sensor_5fmeta_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fmeta_5fschema_2eproto::file_level_enum_descriptors[0];
}
bool SensorMeta_SensorType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorMeta_SensorType SensorMeta::UNKNOWN_SENSOR_TYPE;
const SensorMeta_SensorType SensorMeta::VELODYNE_64;
const SensorMeta_SensorType SensorMeta::VELODYNE_32;
const SensorMeta_SensorType SensorMeta::VELODYNE_16;
const SensorMeta_SensorType SensorMeta::LDLIDAR_4;
const SensorMeta_SensorType SensorMeta::LDLIDAR_1;
const SensorMeta_SensorType SensorMeta::SHORT_RANGE_RADAR;
const SensorMeta_SensorType SensorMeta::LONG_RANGE_RADAR;
const SensorMeta_SensorType SensorMeta::MONOCULAR_CAMERA;
const SensorMeta_SensorType SensorMeta::STEREO_CAMERA;
const SensorMeta_SensorType SensorMeta::ULTRASONIC;
const SensorMeta_SensorType SensorMeta::VELODYNE_128;
const SensorMeta_SensorType SensorMeta::SensorType_MIN;
const SensorMeta_SensorType SensorMeta::SensorType_MAX;
const int SensorMeta::SensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SensorMeta_SensorOrientation_descriptor() {
  protobuf_sensor_5fmeta_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fmeta_5fschema_2eproto::file_level_enum_descriptors[1];
}
bool SensorMeta_SensorOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorMeta_SensorOrientation SensorMeta::FRONT;
const SensorMeta_SensorOrientation SensorMeta::LEFT_FORWARD;
const SensorMeta_SensorOrientation SensorMeta::LEFT;
const SensorMeta_SensorOrientation SensorMeta::LEFT_BACKWARD;
const SensorMeta_SensorOrientation SensorMeta::REAR;
const SensorMeta_SensorOrientation SensorMeta::RIGHT_BACKWARD;
const SensorMeta_SensorOrientation SensorMeta::RIGHT;
const SensorMeta_SensorOrientation SensorMeta::RIGHT_FORWARD;
const SensorMeta_SensorOrientation SensorMeta::PANORAMIC;
const SensorMeta_SensorOrientation SensorMeta::SensorOrientation_MIN;
const SensorMeta_SensorOrientation SensorMeta::SensorOrientation_MAX;
const int SensorMeta::SensorOrientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMeta::kNameFieldNumber;
const int SensorMeta::kTypeFieldNumber;
const int SensorMeta::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMeta::SensorMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_5fmeta_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.SensorMeta)
}
SensorMeta::SensorMeta(const SensorMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&orientation_, &from.orientation_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&orientation_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.SensorMeta)
}

void SensorMeta::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orientation_ = 0;
  type_ = -1;
}

SensorMeta::~SensorMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.SensorMeta)
  SharedDtor();
}

void SensorMeta::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorMeta::descriptor() {
  protobuf_sensor_5fmeta_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fmeta_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorMeta& SensorMeta::default_instance() {
  protobuf_sensor_5fmeta_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorMeta* SensorMeta::New(::google::protobuf::Arena* arena) const {
  SensorMeta* n = new SensorMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.SensorMeta)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    orientation_ = 0;
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.SensorMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.SensorMeta.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.SensorMeta.SensorType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::SensorMeta_SensorType_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::SensorMeta_SensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::SensorMeta_SensorOrientation_IsValid(value)) {
            set_orientation(static_cast< ::apollo::perception::SensorMeta_SensorOrientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.SensorMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.SensorMeta)
  return false;
#undef DO_
}

void SensorMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.SensorMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeta.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .apollo.perception.SensorMeta.SensorType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.SensorMeta)
}

::google::protobuf::uint8* SensorMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.SensorMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.SensorMeta.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .apollo.perception.SensorMeta.SensorType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.SensorMeta)
  return target;
}

size_t SensorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.SensorMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
    }

    // optional .apollo.perception.SensorMeta.SensorType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.SensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.SensorMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.SensorMeta)
    MergeFrom(*source);
  }
}

void SensorMeta::MergeFrom(const SensorMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.SensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.SensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMeta::CopyFrom(const SensorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.SensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeta::IsInitialized() const {
  return true;
}

void SensorMeta::Swap(SensorMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMeta::InternalSwap(SensorMeta* other) {
  name_.Swap(&other->name_);
  std::swap(orientation_, other->orientation_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorMeta::GetMetadata() const {
  protobuf_sensor_5fmeta_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fmeta_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorMeta

// optional string name = 1;
bool SensorMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SensorMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void SensorMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void SensorMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& SensorMeta::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeta.name)
  return name_.GetNoArena();
}
void SensorMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeta.name)
}
#if LANG_CXX11
void SensorMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.SensorMeta.name)
}
#endif
void SensorMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.SensorMeta.name)
}
void SensorMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.SensorMeta.name)
}
::std::string* SensorMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorMeta::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeta.name)
}

// optional .apollo.perception.SensorMeta.SensorType type = 2;
bool SensorMeta::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SensorMeta::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SensorMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SensorMeta::clear_type() {
  type_ = -1;
  clear_has_type();
}
::apollo::perception::SensorMeta_SensorType SensorMeta::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeta.type)
  return static_cast< ::apollo::perception::SensorMeta_SensorType >(type_);
}
void SensorMeta::set_type(::apollo::perception::SensorMeta_SensorType value) {
  assert(::apollo::perception::SensorMeta_SensorType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeta.type)
}

// optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
bool SensorMeta::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SensorMeta::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
void SensorMeta::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
void SensorMeta::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
::apollo::perception::SensorMeta_SensorOrientation SensorMeta::orientation() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeta.orientation)
  return static_cast< ::apollo::perception::SensorMeta_SensorOrientation >(orientation_);
}
void SensorMeta::set_orientation(::apollo::perception::SensorMeta_SensorOrientation value) {
  assert(::apollo::perception::SensorMeta_SensorOrientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeta.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiSensorMeta::kSensorMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiSensorMeta::MultiSensorMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_5fmeta_5fschema_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.MultiSensorMeta)
}
MultiSensorMeta::MultiSensorMeta(const MultiSensorMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sensor_meta_(from.sensor_meta_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.MultiSensorMeta)
}

void MultiSensorMeta::SharedCtor() {
  _cached_size_ = 0;
}

MultiSensorMeta::~MultiSensorMeta() {
  // @@protoc_insertion_point(destructor:apollo.perception.MultiSensorMeta)
  SharedDtor();
}

void MultiSensorMeta::SharedDtor() {
}

void MultiSensorMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiSensorMeta::descriptor() {
  protobuf_sensor_5fmeta_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fmeta_5fschema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiSensorMeta& MultiSensorMeta::default_instance() {
  protobuf_sensor_5fmeta_5fschema_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiSensorMeta* MultiSensorMeta::New(::google::protobuf::Arena* arena) const {
  MultiSensorMeta* n = new MultiSensorMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiSensorMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.MultiSensorMeta)
  sensor_meta_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiSensorMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.MultiSensorMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.SensorMeta sensor_meta = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.MultiSensorMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.MultiSensorMeta)
  return false;
#undef DO_
}

void MultiSensorMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.MultiSensorMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  for (unsigned int i = 0, n = this->sensor_meta_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensor_meta(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.MultiSensorMeta)
}

::google::protobuf::uint8* MultiSensorMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.MultiSensorMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  for (unsigned int i = 0, n = this->sensor_meta_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sensor_meta(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.MultiSensorMeta)
  return target;
}

size_t MultiSensorMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.MultiSensorMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  {
    unsigned int count = this->sensor_meta_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_meta(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiSensorMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.MultiSensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiSensorMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiSensorMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.MultiSensorMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.MultiSensorMeta)
    MergeFrom(*source);
  }
}

void MultiSensorMeta::MergeFrom(const MultiSensorMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.MultiSensorMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_meta_.MergeFrom(from.sensor_meta_);
}

void MultiSensorMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.MultiSensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiSensorMeta::CopyFrom(const MultiSensorMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.MultiSensorMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiSensorMeta::IsInitialized() const {
  return true;
}

void MultiSensorMeta::Swap(MultiSensorMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiSensorMeta::InternalSwap(MultiSensorMeta* other) {
  sensor_meta_.InternalSwap(&other->sensor_meta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiSensorMeta::GetMetadata() const {
  protobuf_sensor_5fmeta_5fschema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_5fmeta_5fschema_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiSensorMeta

// repeated .apollo.perception.SensorMeta sensor_meta = 1;
int MultiSensorMeta::sensor_meta_size() const {
  return sensor_meta_.size();
}
void MultiSensorMeta::clear_sensor_meta() {
  sensor_meta_.Clear();
}
const ::apollo::perception::SensorMeta& MultiSensorMeta::sensor_meta(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_.Get(index);
}
::apollo::perception::SensorMeta* MultiSensorMeta::mutable_sensor_meta(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_.Mutable(index);
}
::apollo::perception::SensorMeta* MultiSensorMeta::add_sensor_meta() {
  // @@protoc_insertion_point(field_add:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_.Add();
}
::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta >*
MultiSensorMeta::mutable_sensor_meta() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.MultiSensorMeta.sensor_meta)
  return &sensor_meta_;
}
const ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta >&
MultiSensorMeta::sensor_meta() const {
  // @@protoc_insertion_point(field_list:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)
