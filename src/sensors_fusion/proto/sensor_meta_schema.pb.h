// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_meta_schema.proto

#ifndef PROTOBUF_sensor_5fmeta_5fschema_2eproto__INCLUDED
#define PROTOBUF_sensor_5fmeta_5fschema_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace apollo {
namespace perception {
class MultiSensorMeta;
class MultiSensorMetaDefaultTypeInternal;
extern MultiSensorMetaDefaultTypeInternal _MultiSensorMeta_default_instance_;
class SensorMeta;
class SensorMetaDefaultTypeInternal;
extern SensorMetaDefaultTypeInternal _SensorMeta_default_instance_;
}  // namespace perception
}  // namespace apollo

namespace apollo {
namespace perception {

namespace protobuf_sensor_5fmeta_5fschema_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sensor_5fmeta_5fschema_2eproto

enum SensorMeta_SensorType {
  SensorMeta_SensorType_UNKNOWN_SENSOR_TYPE = -1,
  SensorMeta_SensorType_VELODYNE_64 = 0,
  SensorMeta_SensorType_VELODYNE_32 = 1,
  SensorMeta_SensorType_VELODYNE_16 = 2,
  SensorMeta_SensorType_LDLIDAR_4 = 3,
  SensorMeta_SensorType_LDLIDAR_1 = 4,
  SensorMeta_SensorType_SHORT_RANGE_RADAR = 5,
  SensorMeta_SensorType_LONG_RANGE_RADAR = 6,
  SensorMeta_SensorType_MONOCULAR_CAMERA = 7,
  SensorMeta_SensorType_STEREO_CAMERA = 8,
  SensorMeta_SensorType_ULTRASONIC = 9,
  SensorMeta_SensorType_VELODYNE_128 = 10
};
bool SensorMeta_SensorType_IsValid(int value);
const SensorMeta_SensorType SensorMeta_SensorType_SensorType_MIN = SensorMeta_SensorType_UNKNOWN_SENSOR_TYPE;
const SensorMeta_SensorType SensorMeta_SensorType_SensorType_MAX = SensorMeta_SensorType_VELODYNE_128;
const int SensorMeta_SensorType_SensorType_ARRAYSIZE = SensorMeta_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorMeta_SensorType_descriptor();
inline const ::std::string& SensorMeta_SensorType_Name(SensorMeta_SensorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorMeta_SensorType_descriptor(), value);
}
inline bool SensorMeta_SensorType_Parse(
    const ::std::string& name, SensorMeta_SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorMeta_SensorType>(
    SensorMeta_SensorType_descriptor(), name, value);
}
enum SensorMeta_SensorOrientation {
  SensorMeta_SensorOrientation_FRONT = 0,
  SensorMeta_SensorOrientation_LEFT_FORWARD = 1,
  SensorMeta_SensorOrientation_LEFT = 2,
  SensorMeta_SensorOrientation_LEFT_BACKWARD = 3,
  SensorMeta_SensorOrientation_REAR = 4,
  SensorMeta_SensorOrientation_RIGHT_BACKWARD = 5,
  SensorMeta_SensorOrientation_RIGHT = 6,
  SensorMeta_SensorOrientation_RIGHT_FORWARD = 7,
  SensorMeta_SensorOrientation_PANORAMIC = 8
};
bool SensorMeta_SensorOrientation_IsValid(int value);
const SensorMeta_SensorOrientation SensorMeta_SensorOrientation_SensorOrientation_MIN = SensorMeta_SensorOrientation_FRONT;
const SensorMeta_SensorOrientation SensorMeta_SensorOrientation_SensorOrientation_MAX = SensorMeta_SensorOrientation_PANORAMIC;
const int SensorMeta_SensorOrientation_SensorOrientation_ARRAYSIZE = SensorMeta_SensorOrientation_SensorOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* SensorMeta_SensorOrientation_descriptor();
inline const ::std::string& SensorMeta_SensorOrientation_Name(SensorMeta_SensorOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    SensorMeta_SensorOrientation_descriptor(), value);
}
inline bool SensorMeta_SensorOrientation_Parse(
    const ::std::string& name, SensorMeta_SensorOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorMeta_SensorOrientation>(
    SensorMeta_SensorOrientation_descriptor(), name, value);
}
// ===================================================================

class SensorMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.SensorMeta) */ {
 public:
  SensorMeta();
  virtual ~SensorMeta();

  SensorMeta(const SensorMeta& from);

  inline SensorMeta& operator=(const SensorMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SensorMeta& default_instance();

  static inline const SensorMeta* internal_default_instance() {
    return reinterpret_cast<const SensorMeta*>(
               &_SensorMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SensorMeta* other);

  // implements Message ----------------------------------------------

  inline SensorMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  SensorMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SensorMeta& from);
  void MergeFrom(const SensorMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SensorMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SensorMeta_SensorType SensorType;
  static const SensorType UNKNOWN_SENSOR_TYPE =
    SensorMeta_SensorType_UNKNOWN_SENSOR_TYPE;
  static const SensorType VELODYNE_64 =
    SensorMeta_SensorType_VELODYNE_64;
  static const SensorType VELODYNE_32 =
    SensorMeta_SensorType_VELODYNE_32;
  static const SensorType VELODYNE_16 =
    SensorMeta_SensorType_VELODYNE_16;
  static const SensorType LDLIDAR_4 =
    SensorMeta_SensorType_LDLIDAR_4;
  static const SensorType LDLIDAR_1 =
    SensorMeta_SensorType_LDLIDAR_1;
  static const SensorType SHORT_RANGE_RADAR =
    SensorMeta_SensorType_SHORT_RANGE_RADAR;
  static const SensorType LONG_RANGE_RADAR =
    SensorMeta_SensorType_LONG_RANGE_RADAR;
  static const SensorType MONOCULAR_CAMERA =
    SensorMeta_SensorType_MONOCULAR_CAMERA;
  static const SensorType STEREO_CAMERA =
    SensorMeta_SensorType_STEREO_CAMERA;
  static const SensorType ULTRASONIC =
    SensorMeta_SensorType_ULTRASONIC;
  static const SensorType VELODYNE_128 =
    SensorMeta_SensorType_VELODYNE_128;
  static inline bool SensorType_IsValid(int value) {
    return SensorMeta_SensorType_IsValid(value);
  }
  static const SensorType SensorType_MIN =
    SensorMeta_SensorType_SensorType_MIN;
  static const SensorType SensorType_MAX =
    SensorMeta_SensorType_SensorType_MAX;
  static const int SensorType_ARRAYSIZE =
    SensorMeta_SensorType_SensorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorType_descriptor() {
    return SensorMeta_SensorType_descriptor();
  }
  static inline const ::std::string& SensorType_Name(SensorType value) {
    return SensorMeta_SensorType_Name(value);
  }
  static inline bool SensorType_Parse(const ::std::string& name,
      SensorType* value) {
    return SensorMeta_SensorType_Parse(name, value);
  }

  typedef SensorMeta_SensorOrientation SensorOrientation;
  static const SensorOrientation FRONT =
    SensorMeta_SensorOrientation_FRONT;
  static const SensorOrientation LEFT_FORWARD =
    SensorMeta_SensorOrientation_LEFT_FORWARD;
  static const SensorOrientation LEFT =
    SensorMeta_SensorOrientation_LEFT;
  static const SensorOrientation LEFT_BACKWARD =
    SensorMeta_SensorOrientation_LEFT_BACKWARD;
  static const SensorOrientation REAR =
    SensorMeta_SensorOrientation_REAR;
  static const SensorOrientation RIGHT_BACKWARD =
    SensorMeta_SensorOrientation_RIGHT_BACKWARD;
  static const SensorOrientation RIGHT =
    SensorMeta_SensorOrientation_RIGHT;
  static const SensorOrientation RIGHT_FORWARD =
    SensorMeta_SensorOrientation_RIGHT_FORWARD;
  static const SensorOrientation PANORAMIC =
    SensorMeta_SensorOrientation_PANORAMIC;
  static inline bool SensorOrientation_IsValid(int value) {
    return SensorMeta_SensorOrientation_IsValid(value);
  }
  static const SensorOrientation SensorOrientation_MIN =
    SensorMeta_SensorOrientation_SensorOrientation_MIN;
  static const SensorOrientation SensorOrientation_MAX =
    SensorMeta_SensorOrientation_SensorOrientation_MAX;
  static const int SensorOrientation_ARRAYSIZE =
    SensorMeta_SensorOrientation_SensorOrientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SensorOrientation_descriptor() {
    return SensorMeta_SensorOrientation_descriptor();
  }
  static inline const ::std::string& SensorOrientation_Name(SensorOrientation value) {
    return SensorMeta_SensorOrientation_Name(value);
  }
  static inline bool SensorOrientation_Parse(const ::std::string& name,
      SensorOrientation* value) {
    return SensorMeta_SensorOrientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  ::apollo::perception::SensorMeta_SensorOrientation orientation() const;
  void set_orientation(::apollo::perception::SensorMeta_SensorOrientation value);

  // optional .apollo.perception.SensorMeta.SensorType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::apollo::perception::SensorMeta_SensorType type() const;
  void set_type(::apollo::perception::SensorMeta_SensorType value);

  // @@protoc_insertion_point(class_scope:apollo.perception.SensorMeta)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_orientation();
  void clear_has_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int orientation_;
  int type_;
  friend struct protobuf_sensor_5fmeta_5fschema_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultiSensorMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.MultiSensorMeta) */ {
 public:
  MultiSensorMeta();
  virtual ~MultiSensorMeta();

  MultiSensorMeta(const MultiSensorMeta& from);

  inline MultiSensorMeta& operator=(const MultiSensorMeta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiSensorMeta& default_instance();

  static inline const MultiSensorMeta* internal_default_instance() {
    return reinterpret_cast<const MultiSensorMeta*>(
               &_MultiSensorMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MultiSensorMeta* other);

  // implements Message ----------------------------------------------

  inline MultiSensorMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  MultiSensorMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultiSensorMeta& from);
  void MergeFrom(const MultiSensorMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultiSensorMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.SensorMeta sensor_meta = 1;
  int sensor_meta_size() const;
  void clear_sensor_meta();
  static const int kSensorMetaFieldNumber = 1;
  const ::apollo::perception::SensorMeta& sensor_meta(int index) const;
  ::apollo::perception::SensorMeta* mutable_sensor_meta(int index);
  ::apollo::perception::SensorMeta* add_sensor_meta();
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta >*
      mutable_sensor_meta();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta >&
      sensor_meta() const;

  // @@protoc_insertion_point(class_scope:apollo.perception.MultiSensorMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta > sensor_meta_;
  friend struct protobuf_sensor_5fmeta_5fschema_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorMeta

// optional string name = 1;
inline bool SensorMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SensorMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SensorMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SensorMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SensorMeta::name() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeta.name)
  return name_.GetNoArena();
}
inline void SensorMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeta.name)
}
#if LANG_CXX11
inline void SensorMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.SensorMeta.name)
}
#endif
inline void SensorMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.SensorMeta.name)
}
inline void SensorMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.SensorMeta.name)
}
inline ::std::string* SensorMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.perception.SensorMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMeta::release_name() {
  // @@protoc_insertion_point(field_release:apollo.perception.SensorMeta.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.SensorMeta.name)
}

// optional .apollo.perception.SensorMeta.SensorType type = 2;
inline bool SensorMeta::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SensorMeta::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SensorMeta::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SensorMeta::clear_type() {
  type_ = -1;
  clear_has_type();
}
inline ::apollo::perception::SensorMeta_SensorType SensorMeta::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeta.type)
  return static_cast< ::apollo::perception::SensorMeta_SensorType >(type_);
}
inline void SensorMeta::set_type(::apollo::perception::SensorMeta_SensorType value) {
  assert(::apollo::perception::SensorMeta_SensorType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeta.type)
}

// optional .apollo.perception.SensorMeta.SensorOrientation orientation = 3;
inline bool SensorMeta::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SensorMeta::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SensorMeta::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SensorMeta::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::apollo::perception::SensorMeta_SensorOrientation SensorMeta::orientation() const {
  // @@protoc_insertion_point(field_get:apollo.perception.SensorMeta.orientation)
  return static_cast< ::apollo::perception::SensorMeta_SensorOrientation >(orientation_);
}
inline void SensorMeta::set_orientation(::apollo::perception::SensorMeta_SensorOrientation value) {
  assert(::apollo::perception::SensorMeta_SensorOrientation_IsValid(value));
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.SensorMeta.orientation)
}

// -------------------------------------------------------------------

// MultiSensorMeta

// repeated .apollo.perception.SensorMeta sensor_meta = 1;
inline int MultiSensorMeta::sensor_meta_size() const {
  return sensor_meta_.size();
}
inline void MultiSensorMeta::clear_sensor_meta() {
  sensor_meta_.Clear();
}
inline const ::apollo::perception::SensorMeta& MultiSensorMeta::sensor_meta(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_.Get(index);
}
inline ::apollo::perception::SensorMeta* MultiSensorMeta::mutable_sensor_meta(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_.Mutable(index);
}
inline ::apollo::perception::SensorMeta* MultiSensorMeta::add_sensor_meta() {
  // @@protoc_insertion_point(field_add:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta >*
MultiSensorMeta::mutable_sensor_meta() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.MultiSensorMeta.sensor_meta)
  return &sensor_meta_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::SensorMeta >&
MultiSensorMeta::sensor_meta() const {
  // @@protoc_insertion_point(field_list:apollo.perception.MultiSensorMeta.sensor_meta)
  return sensor_meta_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace perception
}  // namespace apollo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::SensorMeta_SensorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::SensorMeta_SensorType>() {
  return ::apollo::perception::SensorMeta_SensorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::SensorMeta_SensorOrientation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::SensorMeta_SensorOrientation>() {
  return ::apollo::perception::SensorMeta_SensorOrientation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_5fmeta_5fschema_2eproto__INCLUDED
